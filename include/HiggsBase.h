/////////////////////////////////////////////////////////
// This class has been automatically generated on
// Mon May  3 10:19:15 2010 by ROOT version 5.22/00d
// from TTree ntp1/ntp1
// found on file: /tmp/crovelli/default_MC_9_1.root
//////////////////////////////////////////////////////////

#ifndef HiggsBase_h
#define HiggsBase_h

#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>
#include <vector>
#include <string>

class HiggsBase {
public :
   TTree          *fChain;   //!pointer to the analyzed TTree or TChain
   Int_t           fCurrent; //!current Tree number in a TChain

   // Declaration of leaf types
   Int_t           nl1Technical;
   Int_t           l1Technical[3];   //[nl1Technical]
   Int_t           nl1Global;
   Int_t           l1Global[5];   //[nl1Global]
   Int_t           runNumber;
   Int_t           eventNumber;
   Int_t           lumiBlock;
   Int_t           bunchCrossing;
   Int_t           orbitNumber;
   Int_t           nMc;
   Float_t         pMc[101];   //[nMc]
   Float_t         thetaMc[101];   //[nMc]
   Float_t         etaMc[101];   //[nMc]
   Float_t         phiMc[101];   //[nMc]
   Float_t         energyMc[101];   //[nMc]
   Int_t           idMc[101];   //[nMc]
   Int_t           mothMc[101];   //[nMc]
   Int_t           statusMc[101];   //[nMc]
   Int_t           nTrg;
   Int_t           firedTrg[4];   //[nTrg]
   Int_t           nHLT;
   std::vector<std::string>  *nameHLT;
   Int_t           indexHLT[143];   //[nHLT]
   Int_t           nEle;
   Int_t           chargeEle[100];   //[nEle]
   Float_t         energyEle[100];   //[nEle]
   Float_t         thetaEle[100];   //[nEle]
   Float_t         etaEle[100];   //[nEle]
   Float_t         phiEle[100];   //[nEle]
   Float_t         pxEle[100];   //[nEle]
   Float_t         pyEle[100];   //[nEle]
   Float_t         pzEle[100];   //[nEle]
   Float_t         vertexXEle[100];   //[nEle]
   Float_t         vertexYEle[100];   //[nEle]
   Float_t         vertexZEle[100];   //[nEle]
   Int_t           fiducialFlagsEle[100];   //[nEle]
   Int_t           recoFlagsEle[100];   //[nEle]
   Int_t           energyCorrectionsEle[100];   //[nEle]
   Float_t         esEnergyEle[100];   //[nEle]
   Int_t           superClusterIndexEle[100];   //[nEle]
   Int_t           PFsuperClusterIndexEle[100];   //[nEle]
   Int_t           trackIndexEle[100];   //[nEle]
   Int_t           gsfTrackIndexEle[100];   //[nEle]
   Float_t         convDistEle[100];   //[nEle]
   Float_t         convDcotEle[100];   //[nEle]
   Float_t         convRadiusEle[100];   //[nEle]
   Int_t           convTrackIndexEle[100];   //[nEle]
   Float_t         convXEle[100];   //[nEle]
   Float_t         convYEle[100];   //[nEle]
   Float_t         convZEle[100];   //[nEle]
   Float_t         convChi2ProbEle[100];   //[nEle]
   Int_t           scPixChargeEle[100];   //[nEle]
   Int_t           classificationEle[100];   //[nEle]
   Int_t           standardClassificationEle[100];   //[nEle]
   Float_t         fbremEle[100];   //[nEle]
   Int_t           nbremsEle[100];   //[nEle]
   Float_t         hOverEEle[100];   //[nEle]
   Float_t         eSuperClusterOverPEle[100];   //[nEle]
   Float_t         eSeedOverPoutEle[100];   //[nEle]
   Float_t         deltaEtaAtVtxEle[100];   //[nEle]
   Float_t         deltaPhiAtVtxEle[100];   //[nEle]
   Float_t         deltaEtaAtCaloEle[100];   //[nEle]
   Float_t         deltaPhiAtCaloEle[100];   //[nEle]
   Float_t         tipEle[100];   //[nEle]
   Float_t         dr03TkSumPtEle[100];   //[nEle]
   Float_t         dr03EcalRecHitSumEtEle[100];   //[nEle]
   Float_t         dr03HcalTowerSumEtEle[100];   //[nEle]
   Float_t         dr04TkSumPtEle[100];   //[nEle]
   Float_t         dr04EcalRecHitSumEtEle[100];   //[nEle]
   Float_t         dr04HcalTowerSumEtEle[100];   //[nEle]
   Float_t         scBasedEcalSum03Ele[100];   //[nEle]
   Float_t         scBasedEcalSum04Ele[100];   //[nEle]
   Int_t           eleIdCutsEle[100];   //[nEle]
   Float_t         eleIdLikelihoodEle[100];   //[nEle]
   Float_t         pflowMVAEle[100];   //[nEle]
   Int_t           nPFEle;
   Int_t           chargePFEle[100];   //[nPFEle]
   Float_t         energyPFEle[100];   //[nPFEle]
   Float_t         thetaPFEle[100];   //[nPFEle]
   Float_t         etaPFEle[100];   //[nPFEle]
   Float_t         phiPFEle[100];   //[nPFEle]
   Float_t         pxPFEle[100];   //[nPFEle]
   Float_t         pyPFEle[100];   //[nPFEle]
   Float_t         pzPFEle[100];   //[nPFEle]
   Float_t         vertexXPFEle[100];   //[nPFEle]
   Float_t         vertexYPFEle[100];   //[nPFEle]
   Float_t         vertexZPFEle[100];   //[nPFEle]
   Float_t         MvaOutputPFEle[100];   //[nPFEle]
   Float_t         PS1EnergyPFEle[100];   //[nPFEle]
   Float_t         PS2EnergyPFEle[100];   //[nPFEle]
   Float_t         EcalEnergyPFEle[100];   //[nPFEle]
   Float_t         HcalEnergyPFEle[100];   //[nPFEle]
   Float_t         RawEcalEnergyPFEle[100];   //[nPFEle]
   Float_t         RawHcalEnergyPFEle[100];   //[nPFEle]
   Float_t         PositionAtEcalXPFEle[100];   //[nPFEle]
   Float_t         PositionAtEcalYPFEle[100];   //[nPFEle]
   Float_t         PositionAtEcalZPFEle[100];   //[nPFEle]
   Int_t           gsfTrackIndexPFEle[100];   //[nPFEle]
   Int_t           trackIndexPFEle[100];   //[nPFEle]
   Float_t         chIso03vetoPFEle[100];   //[nPFEle]
   Float_t         chIso04vetoPFEle[100];   //[nPFEle]
   Float_t         chIso05vetoPFEle[100];   //[nPFEle]
   Float_t         chIso03noVetoPFEle[100];   //[nPFEle]
   Float_t         chIso04noVetoPFEle[100];   //[nPFEle]
   Float_t         chIso05noVetoPFEle[100];   //[nPFEle]
   Float_t         chIso03vetoNVCPFEle[100];   //[nPFEle]
   Float_t         chIso04vetoNVCPFEle[100];   //[nPFEle]
   Float_t         chIso05vetoNVCPFEle[100];   //[nPFEle]
   Float_t         chIso03noVetoNVCPFEle[100];   //[nPFEle]
   Float_t         chIso04noVetoNVCPFEle[100];   //[nPFEle]
   Float_t         chIso05noVetoNVCPFEle[100];   //[nPFEle]
   Float_t         nhIso03vetoPFEle[100];   //[nPFEle]
   Float_t         nhIso04vetoPFEle[100];   //[nPFEle]
   Float_t         nhIso05vetoPFEle[100];   //[nPFEle]
   Float_t         nhIso03noVetoPFEle[100];   //[nPFEle]
   Float_t         nhIso04noVetoPFEle[100];   //[nPFEle]
   Float_t         nhIso05noVetoPFEle[100];   //[nPFEle]
   Float_t         phIso03vetoPFEle[100];   //[nPFEle]
   Float_t         phIso04vetoPFEle[100];   //[nPFEle]
   Float_t         phIso05vetoPFEle[100];   //[nPFEle]
   Float_t         phIso03noVetoPFEle[100];   //[nPFEle]
   Float_t         phIso04noVetoPFEle[100];   //[nPFEle]
   Float_t         phIso05noVetoPFEle[100];   //[nPFEle]
   Int_t           nSC;
   Int_t           nBCSC[100];   //[nSC]
   Int_t           nCrystalsSC[100];   //[nSC]
   Float_t         rawEnergySC[100];   //[nSC]
   Float_t         energySC[100];   //[nSC]
   Float_t         etaSC[100];   //[nSC]
   Float_t         thetaSC[100];   //[nSC]
   Float_t         phiSC[100];   //[nSC]
   Float_t         phiWidthSC[100];   //[nSC]
   Float_t         etaWidthSC[100];   //[nSC]
   Float_t         e3x3SC[100];   //[nSC]
   Float_t         e5x5SC[100];   //[nSC]
   Float_t         eMaxSC[100];   //[nSC]
   Float_t         e2x2SC[100];   //[nSC]
   Float_t         e2ndSC[100];   //[nSC]
   Float_t         e1x5SC[100];   //[nSC]
   Float_t         e2x5MaxSC[100];   //[nSC]
   Float_t         e4SwissCrossSC[100];   //[nSC]
   Float_t         covIEtaIEtaSC[100];   //[nSC]
   Float_t         covIEtaIPhiSC[100];   //[nSC]
   Float_t         covIPhiIPhiSC[100];   //[nSC]
   Float_t         hOverESC[100];   //[nSC]
   Int_t           recoFlagSC[100];   //[nSC]
   Int_t           channelStatusSC[100];   //[nSC]
   Float_t         timeSC[100];   //[nSC]
   Float_t         chi2SC[100];   //[nSC]
   Float_t         seedEnergySC[100];   //[nSC]
   Int_t           idClosProblSC[100];   //[nSC]
   Int_t           sevClosProblSC[100];   //[nSC]
   Float_t         fracClosProblSC[100];   //[nSC]
   Float_t         scBasedEcalSum03SC[100];   //[nSC]
   Float_t         scBasedEcalSum04SC[100];   //[nSC]
   Float_t         ecalRecHitSumEtConeDR03SC[100];   //[nSC]
   Float_t         hcalTowerSumEtConeDR03SC[100];   //[nSC]
   Float_t         trkSumPtSolidConeDR03SC[100];   //[nSC]
   Float_t         ecalRecHitSumEtConeDR04SC[100];   //[nSC]
   Float_t         hcalTowerSumEtConeDR04SC[100];   //[nSC]
   Float_t         trkSumPtSolidConeDR04SC[100];   //[nSC]
   Int_t           nPFSC;
   Int_t           nBCPFSC[100];   //[nPFSC]
   Int_t           nCrystalsPFSC[100];   //[nPFSC]
   Float_t         rawEnergyPFSC[100];   //[nPFSC]
   Float_t         energyPFSC[100];   //[nPFSC]
   Float_t         etaPFSC[100];   //[nPFSC]
   Float_t         thetaPFSC[100];   //[nPFSC]
   Float_t         phiPFSC[100];   //[nPFSC]
   Float_t         phiWidthPFSC[100];   //[nPFSC]
   Float_t         etaWidthPFSC[100];   //[nPFSC]
   Float_t         e3x3PFSC[100];   //[nPFSC]
   Float_t         e5x5PFSC[100];   //[nPFSC]
   Float_t         eMaxPFSC[100];   //[nPFSC]
   Float_t         e2x2PFSC[100];   //[nPFSC]
   Float_t         e2ndPFSC[100];   //[nPFSC]
   Float_t         e1x5PFSC[100];   //[nPFSC]
   Float_t         e2x5MaxPFSC[100];   //[nPFSC]
   Float_t         e4SwissCrossPFSC[100];   //[nPFSC]
   Float_t         covIEtaIEtaPFSC[100];   //[nPFSC]
   Float_t         covIEtaIPhiPFSC[100];   //[nPFSC]
   Float_t         covIPhiIPhiPFSC[100];   //[nPFSC]
   Float_t         hOverEPFSC[100];   //[nPFSC]
   Int_t           recoFlagPFSC[100];   //[nPFSC]
   Int_t           channelStatusPFSC[100];   //[nPFSC]
   Float_t         timePFSC[100];   //[nPFSC]
   Float_t         chi2PFSC[100];   //[nPFSC]
   Float_t         seedEnergyPFSC[100];   //[nPFSC]
   Int_t           idClosProblPFSC[100];   //[nPFSC]
   Int_t           sevClosProblPFSC[100];   //[nPFSC]
   Float_t         fracClosProblPFSC[100];   //[nPFSC]
   Float_t         scBasedEcalSum03PFSC[100];   //[nPFSC]
   Float_t         scBasedEcalSum04PFSC[100];   //[nPFSC]
   Int_t           nBC;
   Int_t           nCrystalsBC[200];   //[nBC]
   Float_t         energyBC[200];   //[nBC]
   Float_t         etaBC[200];   //[nBC]
   Float_t         thetaBC[200];   //[nBC]
   Float_t         phiBC[200];   //[nBC]
   Float_t         e3x3BC[200];   //[nBC]
   Float_t         e5x5BC[200];   //[nBC]
   Float_t         eMaxBC[200];   //[nBC]
   Float_t         e2x2BC[200];   //[nBC]
   Float_t         e2ndBC[200];   //[nBC]
   Float_t         covIEtaIEtaBC[200];   //[nBC]
   Float_t         covIEtaIPhiBC[200];   //[nBC]
   Float_t         covIPhiIPhiBC[200];   //[nBC]
   Int_t           recoFlagBC[200];   //[nBC]
   Float_t         timeBC[200];   //[nBC]
   Float_t         chi2BC[200];   //[nBC]
   Float_t         seedEnergyBC[200];   //[nBC]
   Int_t           idClosProblBC[200];   //[nBC]
   Int_t           sevClosProblBC[200];   //[nBC]
   Float_t         fracClosProblBC[200];   //[nBC]
   Int_t           indexSCBC[200];   //[nBC]
   Int_t           nTrack;
   Float_t         pxTrack[500];   //[nTrack]
   Float_t         pyTrack[500];   //[nTrack]
   Float_t         pzTrack[500];   //[nTrack]
   Int_t           vtxIndexTrack[500];   //[nTrack]
   Float_t         vtxWeightTrack[500];   //[nTrack]
   Float_t         chargeTrack[500];   //[nTrack]
   Float_t         ptErrorTrack[500];   //[nTrack]
   Float_t         trackValidHitsTrack[500];   //[nTrack]
   Float_t         trackLostHitsTrack[500];   //[nTrack]
   Float_t         trackNormalizedChi2Track[500];   //[nTrack]
   Int_t           qualityMaskTrack[500];   //[nTrack]
   Float_t         impactPar3DTrack[500];   //[nTrack]
   Float_t         impactPar3DErrorTrack[500];   //[nTrack]
   Float_t         transvImpactParTrack[500];   //[nTrack]
   Float_t         transvImpactParErrorTrack[500];   //[nTrack]
   Float_t         trackVxTrack[500];   //[nTrack]
   Float_t         trackVyTrack[500];   //[nTrack]
   Float_t         trackVzTrack[500];   //[nTrack]
   Float_t         pxAtOuterTrack[500];   //[nTrack]
   Float_t         pyAtOuterTrack[500];   //[nTrack]
   Float_t         pzAtOuterTrack[500];   //[nTrack]
   Float_t         xAtOuterTrack[500];   //[nTrack]
   Float_t         yAtOuterTrack[500];   //[nTrack]
   Float_t         zAtOuterTrack[500];   //[nTrack]
   Float_t         pxAtInnerTrack[500];   //[nTrack]
   Float_t         pyAtInnerTrack[500];   //[nTrack]
   Float_t         pzAtInnerTrack[500];   //[nTrack]
   Float_t         xAtInnerTrack[500];   //[nTrack]
   Float_t         yAtInnerTrack[500];   //[nTrack]
   Float_t         zAtInnerTrack[500];   //[nTrack]
   Float_t         recHitsSizeTrack[500];   //[nTrack]
   Int_t           pixelHitsTrack[500];   //[nTrack]
   Int_t           expInnerLayersTrack[500];   //[nTrack]
   Int_t           numberOfValidPixelBarrelHitsTrack[500];   //[nTrack]
   Int_t           numberOfValidPixelEndcapHitsTrack[500];   //[nTrack]
   Int_t           numberOfValidStripTIBHitsTrack[500];   //[nTrack]
   Int_t           numberOfValidStripTIDHitsTrack[500];   //[nTrack]
   Int_t           numberOfValidStripTOBHitsTrack[500];   //[nTrack]
   Int_t           numberOfValidStripTECHitsTrack[500];   //[nTrack]
   Float_t         truncatedDeDxTrack[500];   //[nTrack]
   Float_t         truncatedDeDxErrorTrack[500];   //[nTrack]
   Float_t         truncatedDeDxNoMTrack[500];   //[nTrack]
   Float_t         medianDeDxTrack[500];   //[nTrack]
   Float_t         medianDeDxErrorTrack[500];   //[nTrack]
   Float_t         medianDeDxNoMTrack[500];   //[nTrack]
   Float_t         harmonic2DeDxTrack[500];   //[nTrack]
   Float_t         harmonic2DeDxErrorTrack[500];   //[nTrack]
   Float_t         harmonic2DeDxNoMTrack[500];   //[nTrack]
   Int_t           nGsfTrack;
   Float_t         pxGsfTrack[300];   //[nGsfTrack]
   Float_t         pyGsfTrack[300];   //[nGsfTrack]
   Float_t         pzGsfTrack[300];   //[nGsfTrack]
   Int_t           vtxIndexGsfTrack[300];   //[nGsfTrack]
   Float_t         vtxWeightGsfTrack[300];   //[nGsfTrack]
   Float_t         chargeGsfTrack[300];   //[nGsfTrack]
   Float_t         ptErrorGsfTrack[300];   //[nGsfTrack]
   Float_t         trackValidHitsGsfTrack[300];   //[nGsfTrack]
   Float_t         trackLostHitsGsfTrack[300];   //[nGsfTrack]
   Float_t         trackNormalizedChi2GsfTrack[300];   //[nGsfTrack]
   Int_t           qualityMaskGsfTrack[300];   //[nGsfTrack]
   Float_t         impactPar3DGsfTrack[300];   //[nGsfTrack]
   Float_t         impactPar3DErrorGsfTrack[300];   //[nGsfTrack]
   Float_t         transvImpactParGsfTrack[300];   //[nGsfTrack]
   Float_t         transvImpactParErrorGsfTrack[300];   //[nGsfTrack]
   Float_t         trackVxGsfTrack[300];   //[nGsfTrack]
   Float_t         trackVyGsfTrack[300];   //[nGsfTrack]
   Float_t         trackVzGsfTrack[300];   //[nGsfTrack]
   Float_t         pxAtOuterGsfTrack[300];   //[nGsfTrack]
   Float_t         pyAtOuterGsfTrack[300];   //[nGsfTrack]
   Float_t         pzAtOuterGsfTrack[300];   //[nGsfTrack]
   Float_t         xAtOuterGsfTrack[300];   //[nGsfTrack]
   Float_t         yAtOuterGsfTrack[300];   //[nGsfTrack]
   Float_t         zAtOuterGsfTrack[300];   //[nGsfTrack]
   Float_t         pxAtInnerGsfTrack[300];   //[nGsfTrack]
   Float_t         pyAtInnerGsfTrack[300];   //[nGsfTrack]
   Float_t         pzAtInnerGsfTrack[300];   //[nGsfTrack]
   Float_t         xAtInnerGsfTrack[300];   //[nGsfTrack]
   Float_t         yAtInnerGsfTrack[300];   //[nGsfTrack]
   Float_t         zAtInnerGsfTrack[300];   //[nGsfTrack]
   Float_t         recHitsSizeGsfTrack[300];   //[nGsfTrack]
   Int_t           pixelHitsGsfTrack[300];   //[nGsfTrack]
   Int_t           expInnerLayersGsfTrack[300];   //[nGsfTrack]
   Int_t           numberOfValidPixelBarrelHitsGsfTrack[300];   //[nGsfTrack]
   Int_t           numberOfValidPixelEndcapHitsGsfTrack[300];   //[nGsfTrack]
   Int_t           numberOfValidStripTIBHitsGsfTrack[300];   //[nGsfTrack]
   Int_t           numberOfValidStripTIDHitsGsfTrack[300];   //[nGsfTrack]
   Int_t           numberOfValidStripTOBHitsGsfTrack[300];   //[nGsfTrack]
   Int_t           numberOfValidStripTECHitsGsfTrack[300];   //[nGsfTrack]
   Int_t           chargeModeGsfTrack[300];   //[nGsfTrack]
   Float_t         pxModeGsfTrack[300];   //[nGsfTrack]
   Float_t         pyModeGsfTrack[300];   //[nGsfTrack]
   Float_t         pzModeGsfTrack[300];   //[nGsfTrack]
   Int_t           recoFlagsGsfTrack[300];   //[nGsfTrack]
   Int_t           nGlobalMuonTrack;
   Float_t         pxGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         pyGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         pzGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Int_t           vtxIndexGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         vtxWeightGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         chargeGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         ptErrorGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         trackValidHitsGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         trackLostHitsGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         trackNormalizedChi2GlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Int_t           qualityMaskGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         impactPar3DGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         impactPar3DErrorGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         transvImpactParGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         transvImpactParErrorGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         trackVxGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         trackVyGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         trackVzGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         pxAtOuterGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         pyAtOuterGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         pzAtOuterGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         xAtOuterGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         yAtOuterGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         zAtOuterGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         pxAtInnerGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         pyAtInnerGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         pzAtInnerGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         xAtInnerGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         yAtInnerGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         zAtInnerGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Float_t         recHitsSizeGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Int_t           pixelHitsGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Int_t           expInnerLayersGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Int_t           numberOfValidPixelBarrelHitsGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Int_t           numberOfValidPixelEndcapHitsGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Int_t           numberOfValidStripTIBHitsGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Int_t           numberOfValidStripTIDHitsGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Int_t           numberOfValidStripTOBHitsGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Int_t           numberOfValidStripTECHitsGlobalMuonTrack[100];   //[nGlobalMuonTrack]
   Int_t           nSTAMuonTrack;
   Float_t         pxSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         pySTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         pzSTAMuonTrack[100];   //[nSTAMuonTrack]
   Int_t           vtxIndexSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         vtxWeightSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         chargeSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         ptErrorSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         trackValidHitsSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         trackLostHitsSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         trackNormalizedChi2STAMuonTrack[100];   //[nSTAMuonTrack]
   Int_t           qualityMaskSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         impactPar3DSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         impactPar3DErrorSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         transvImpactParSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         transvImpactParErrorSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         trackVxSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         trackVySTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         trackVzSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         pxAtOuterSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         pyAtOuterSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         pzAtOuterSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         xAtOuterSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         yAtOuterSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         zAtOuterSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         pxAtInnerSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         pyAtInnerSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         pzAtInnerSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         xAtInnerSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         yAtInnerSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         zAtInnerSTAMuonTrack[100];   //[nSTAMuonTrack]
   Float_t         recHitsSizeSTAMuonTrack[100];   //[nSTAMuonTrack]
   Int_t           pixelHitsSTAMuonTrack[100];   //[nSTAMuonTrack]
   Int_t           expInnerLayersSTAMuonTrack[100];   //[nSTAMuonTrack]
   Int_t           numberOfValidPixelBarrelHitsSTAMuonTrack[100];   //[nSTAMuonTrack]
   Int_t           numberOfValidPixelEndcapHitsSTAMuonTrack[100];   //[nSTAMuonTrack]
   Int_t           numberOfValidStripTIBHitsSTAMuonTrack[100];   //[nSTAMuonTrack]
   Int_t           numberOfValidStripTIDHitsSTAMuonTrack[100];   //[nSTAMuonTrack]
   Int_t           numberOfValidStripTOBHitsSTAMuonTrack[100];   //[nSTAMuonTrack]
   Int_t           numberOfValidStripTECHitsSTAMuonTrack[100];   //[nSTAMuonTrack]
   Int_t           nPV;
   Float_t         PVxPV[20];   //[nPV]
   Float_t         PVyPV[20];   //[nPV]
   Float_t         PVzPV[20];   //[nPV]
   Float_t         PVErrxPV[20];   //[nPV]
   Float_t         PVErryPV[20];   //[nPV]
   Float_t         PVErrzPV[20];   //[nPV]
   Float_t         SumPtPV[20];   //[nPV]
   Float_t         ndofPV[20];   //[nPV]
   Float_t         chi2PV[20];   //[nPV]
   Int_t           nMuon;
   Int_t           chargeMuon[100];   //[nMuon]
   Float_t         energyMuon[100];   //[nMuon]
   Float_t         thetaMuon[100];   //[nMuon]
   Float_t         etaMuon[100];   //[nMuon]
   Float_t         phiMuon[100];   //[nMuon]
   Float_t         pxMuon[100];   //[nMuon]
   Float_t         pyMuon[100];   //[nMuon]
   Float_t         pzMuon[100];   //[nMuon]
   Float_t         vertexXMuon[100];   //[nMuon]
   Float_t         vertexYMuon[100];   //[nMuon]
   Float_t         vertexZMuon[100];   //[nMuon]
   Int_t           trackIndexMuon[100];   //[nMuon]
   Int_t           standAloneTrackIndexMuon[100];   //[nMuon]
   Int_t           combinedTrackIndexMuon[100];   //[nMuon]
   Int_t           muonIdMuon[100];   //[nMuon]
   Float_t         sumPt03Muon[100];   //[nMuon]
   Float_t         emEt03Muon[100];   //[nMuon]
   Float_t         hadEt03Muon[100];   //[nMuon]
   Float_t         hoEt03Muon[100];   //[nMuon]
   Float_t         nTrk03Muon[100];   //[nMuon]
   Float_t         nJets03Muon[100];   //[nMuon]
   Float_t         sumPt05Muon[100];   //[nMuon]
   Float_t         emEt05Muon[100];   //[nMuon]
   Float_t         hadEt05Muon[100];   //[nMuon]
   Float_t         hoEt05Muon[100];   //[nMuon]
   Float_t         nTrk05Muon[100];   //[nMuon]
   Float_t         nJets05Muon[100];   //[nMuon]
   Float_t         EcalExpDepoMuon[100];   //[nMuon]
   Float_t         HcalExpDepoMuon[100];   //[nMuon]
   Float_t         HoExpDepoMuon[100];   //[nMuon]
   Float_t         emS9Muon[100];   //[nMuon]
   Float_t         hadS9Muon[100];   //[nMuon]
   Float_t         hoS9Muon[100];   //[nMuon]
   Float_t         CaloCompMuon[100];   //[nMuon]
   Int_t           nMet;
   Int_t           chargeMet[1];   //[nMet]
   Float_t         energyMet[1];   //[nMet]
   Float_t         thetaMet[1];   //[nMet]
   Float_t         etaMet[1];   //[nMet]
   Float_t         phiMet[1];   //[nMet]
   Float_t         pxMet[1];   //[nMet]
   Float_t         pyMet[1];   //[nMet]
   Float_t         pzMet[1];   //[nMet]
   Float_t         vertexXMet[1];   //[nMet]
   Float_t         vertexYMet[1];   //[nMet]
   Float_t         vertexZMet[1];   //[nMet]
   Int_t           nTCMet;
   Int_t           chargeTCMet[1];   //[nTCMet]
   Float_t         energyTCMet[1];   //[nTCMet]
   Float_t         thetaTCMet[1];   //[nTCMet]
   Float_t         etaTCMet[1];   //[nTCMet]
   Float_t         phiTCMet[1];   //[nTCMet]
   Float_t         pxTCMet[1];   //[nTCMet]
   Float_t         pyTCMet[1];   //[nTCMet]
   Float_t         pzTCMet[1];   //[nTCMet]
   Float_t         vertexXTCMet[1];   //[nTCMet]
   Float_t         vertexYTCMet[1];   //[nTCMet]
   Float_t         vertexZTCMet[1];   //[nTCMet]
   Int_t           nPFMet;
   Int_t           chargePFMet[1];   //[nPFMet]
   Float_t         energyPFMet[1];   //[nPFMet]
   Float_t         thetaPFMet[1];   //[nPFMet]
   Float_t         etaPFMet[1];   //[nPFMet]
   Float_t         phiPFMet[1];   //[nPFMet]
   Float_t         pxPFMet[1];   //[nPFMet]
   Float_t         pyPFMet[1];   //[nPFMet]
   Float_t         pzPFMet[1];   //[nPFMet]
   Float_t         vertexXPFMet[1];   //[nPFMet]
   Float_t         vertexYPFMet[1];   //[nPFMet]
   Float_t         vertexZPFMet[1];   //[nPFMet]
   Int_t           nGenMet;
   Int_t           chargeGenMet[1];   //[nGenMet]
   Float_t         energyGenMet[1];   //[nGenMet]
   Float_t         thetaGenMet[1];   //[nGenMet]
   Float_t         etaGenMet[1];   //[nGenMet]
   Float_t         phiGenMet[1];   //[nGenMet]
   Float_t         pxGenMet[1];   //[nGenMet]
   Float_t         pyGenMet[1];   //[nGenMet]
   Float_t         pzGenMet[1];   //[nGenMet]
   Float_t         vertexXGenMet[1];   //[nGenMet]
   Float_t         vertexYGenMet[1];   //[nGenMet]
   Float_t         vertexZGenMet[1];   //[nGenMet]
   Int_t           nAK5Jet;
   Int_t           chargeAK5Jet[200];   //[nAK5Jet]
   Float_t         energyAK5Jet[200];   //[nAK5Jet]
   Float_t         thetaAK5Jet[200];   //[nAK5Jet]
   Float_t         etaAK5Jet[200];   //[nAK5Jet]
   Float_t         phiAK5Jet[200];   //[nAK5Jet]
   Float_t         pxAK5Jet[200];   //[nAK5Jet]
   Float_t         pyAK5Jet[200];   //[nAK5Jet]
   Float_t         pzAK5Jet[200];   //[nAK5Jet]
   Float_t         vertexXAK5Jet[200];   //[nAK5Jet]
   Float_t         vertexYAK5Jet[200];   //[nAK5Jet]
   Float_t         vertexZAK5Jet[200];   //[nAK5Jet]
   Float_t         alphaAK5Jet[200];   //[nAK5Jet]
   Float_t         emFracAK5Jet[200];   //[nAK5Jet]
   Float_t         hadFracAK5Jet[200];   //[nAK5Jet]
   Int_t           IdAK5Jet[200];   //[nAK5Jet]
   Int_t           nHitAK5Jet[200];   //[nAK5Jet]
   Int_t           nHit90AK5Jet[200];   //[nAK5Jet]
   Float_t         fHPDAK5Jet[200];   //[nAK5Jet]
   Float_t         covEtaEtaAK5Jet[200];   //[nAK5Jet]
   Float_t         covPhiPhiAK5Jet[200];   //[nAK5Jet]
   Float_t         fLSAK5Jet[200];   //[nAK5Jet]
   Float_t         fOOTAK5Jet[200];   //[nAK5Jet]
   Float_t         combinedSecondaryVertexBJetTagsAK5Jet[200];   //[nAK5Jet]
   Float_t         combinedSecondaryVertexMVABJetTagsAK5Jet[200];   //[nAK5Jet]
   Float_t         jetBProbabilityBJetTagsAK5Jet[200];   //[nAK5Jet]
   Float_t         jetProbabilityBJetTagsAK5Jet[200];   //[nAK5Jet]
   Float_t         simpleSecondaryVertexBJetTagsAK5Jet[200];   //[nAK5Jet]
   Float_t         softMuonBJetTagsAK5Jet[200];   //[nAK5Jet]
   Float_t         softMuonByIP3dBJetTagsAK5Jet[200];   //[nAK5Jet]
   Float_t         softMuonByPtBJetTagsAK5Jet[200];   //[nAK5Jet]
   Float_t         softElectronBJetTagsAK5Jet[200];   //[nAK5Jet]
   Float_t         softElectronByIP3dBJetTagsAK5Jet[200];   //[nAK5Jet]
   Float_t         softElectronByPtBJetTagsAK5Jet[200];   //[nAK5Jet]
   Float_t         trackCountingHighPurBJetTagsAK5Jet[200];   //[nAK5Jet]
   Float_t         trackCountingHighEffBJetTagsAK5Jet[200];   //[nAK5Jet]
   Float_t         uncorrEnergyAK5Jet[200];   //[nAK5Jet]
   Int_t           nAK5PFJet;
   Int_t           chargeAK5PFJet[200];   //[nAK5PFJet]
   Float_t         energyAK5PFJet[200];   //[nAK5PFJet]
   Float_t         thetaAK5PFJet[200];   //[nAK5PFJet]
   Float_t         etaAK5PFJet[200];   //[nAK5PFJet]
   Float_t         phiAK5PFJet[200];   //[nAK5PFJet]
   Float_t         pxAK5PFJet[200];   //[nAK5PFJet]
   Float_t         pyAK5PFJet[200];   //[nAK5PFJet]
   Float_t         pzAK5PFJet[200];   //[nAK5PFJet]
   Float_t         vertexXAK5PFJet[200];   //[nAK5PFJet]
   Float_t         vertexYAK5PFJet[200];   //[nAK5PFJet]
   Float_t         vertexZAK5PFJet[200];   //[nAK5PFJet]
   Float_t         chargedHadronEnergyAK5PFJet[200];   //[nAK5PFJet]
   Float_t         neutralHadronEnergyAK5PFJet[200];   //[nAK5PFJet]
   Float_t         chargedEmEnergyAK5PFJet[200];   //[nAK5PFJet]
   Float_t         neutralEmEnergyAK5PFJet[200];   //[nAK5PFJet]
   Float_t         neutralMultiplicityAK5PFJet[200];   //[nAK5PFJet]
   Float_t         chargedMultiplicityAK5PFJet[200];   //[nAK5PFJet]
   Float_t         muonMultiplicityAK5PFJet[200];   //[nAK5PFJet]
   Float_t         uncorrEnergyAK5PFJet[200];   //[nAK5PFJet]
   Int_t           nAK5GenJet;
   Int_t           chargeAK5GenJet[200];   //[nAK5GenJet]
   Float_t         energyAK5GenJet[200];   //[nAK5GenJet]
   Float_t         thetaAK5GenJet[200];   //[nAK5GenJet]
   Float_t         etaAK5GenJet[200];   //[nAK5GenJet]
   Float_t         phiAK5GenJet[200];   //[nAK5GenJet]
   Float_t         pxAK5GenJet[200];   //[nAK5GenJet]
   Float_t         pyAK5GenJet[200];   //[nAK5GenJet]
   Float_t         pzAK5GenJet[200];   //[nAK5GenJet]
   Float_t         vertexXAK5GenJet[200];   //[nAK5GenJet]
   Float_t         vertexYAK5GenJet[200];   //[nAK5GenJet]
   Float_t         vertexZAK5GenJet[200];   //[nAK5GenJet]
   Double_t        genPtHat;
   Double_t        genProcessId;
   Double_t        genWeight;
   Double_t        genAlphaQCD;
   Double_t        genAlphaQED;

   // List of branches
   TBranch        *b_nl1Technical;   //!
   TBranch        *b_l1Technical;   //!
   TBranch        *b_nl1Global;   //!
   TBranch        *b_l1Global;   //!
   TBranch        *b_runNumber;   //!
   TBranch        *b_eventNumber;   //!
   TBranch        *b_lumiBlock;   //!
   TBranch        *b_bunchCrossing;   //!
   TBranch        *b_orbitNumber;   //!
   TBranch        *b_nMc;   //!
   TBranch        *b_pMc;   //!
   TBranch        *b_thetaMc;   //!
   TBranch        *b_etaMc;   //!
   TBranch        *b_phiMc;   //!
   TBranch        *b_energyMc;   //!
   TBranch        *b_idMc;   //!
   TBranch        *b_mothMc;   //!
   TBranch        *b_statusMc;   //!
   TBranch        *b_nTrg;   //!
   TBranch        *b_firedTrg;   //!
   TBranch        *b_nHLT;   //!
   TBranch        *b_nameHLT;   //!
   TBranch        *b_indexHLT;   //!
   TBranch        *b_nEle;   //!
   TBranch        *b_chargeEle;   //!
   TBranch        *b_energyEle;   //!
   TBranch        *b_thetaEle;   //!
   TBranch        *b_etaEle;   //!
   TBranch        *b_phiEle;   //!
   TBranch        *b_pxEle;   //!
   TBranch        *b_pyEle;   //!
   TBranch        *b_pzEle;   //!
   TBranch        *b_vertexXEle;   //!
   TBranch        *b_vertexYEle;   //!
   TBranch        *b_vertexZEle;   //!
   TBranch        *b_fiducialFlagsEle;   //!
   TBranch        *b_recoFlagsEle;   //!
   TBranch        *b_energyCorrectionsEle;   //!
   TBranch        *b_esEnergyEle;   //!
   TBranch        *b_superClusterIndexEle;   //!
   TBranch        *b_PFsuperClusterIndexEle;   //!
   TBranch        *b_trackIndexEle;   //!
   TBranch        *b_gsfTrackIndexEle;   //!
   TBranch        *b_convDistEle;   //!
   TBranch        *b_convDcotEle;   //!
   TBranch        *b_convRadiusEle;   //!
   TBranch        *b_convTrackIndexEle;   //!
   TBranch        *b_convXEle;   //!
   TBranch        *b_convYEle;   //!
   TBranch        *b_convZEle;   //!
   TBranch        *b_convChi2ProbEle;   //!
   TBranch        *b_scPixChargeEle;   //!
   TBranch        *b_classificationEle;   //!
   TBranch        *b_standardClassificationEle;   //!
   TBranch        *b_fbremEle;   //!
   TBranch        *b_nbremsEle;   //!
   TBranch        *b_hOverEEle;   //!
   TBranch        *b_eSuperClusterOverPEle;   //!
   TBranch        *b_eSeedOverPoutEle;   //!
   TBranch        *b_deltaEtaAtVtxEle;   //!
   TBranch        *b_deltaPhiAtVtxEle;   //!
   TBranch        *b_deltaEtaAtCaloEle;   //!
   TBranch        *b_deltaPhiAtCaloEle;   //!
   TBranch        *b_tipEle;   //!
   TBranch        *b_dr03TkSumPtEle;   //!
   TBranch        *b_dr03EcalRecHitSumEtEle;   //!
   TBranch        *b_dr03HcalTowerSumEtEle;   //!
   TBranch        *b_dr04TkSumPtEle;   //!
   TBranch        *b_dr04EcalRecHitSumEtEle;   //!
   TBranch        *b_dr04HcalTowerSumEtEle;   //!
   TBranch        *b_scBasedEcalSum03Ele;   //!
   TBranch        *b_scBasedEcalSum04Ele;   //!
   TBranch        *b_eleIdCutsEle;   //!
   TBranch        *b_eleIdLikelihoodEle;   //!
   TBranch        *b_pflowMVAEle;   //!
   TBranch        *b_nPFEle;   //!
   TBranch        *b_chargePFEle;   //!
   TBranch        *b_energyPFEle;   //!
   TBranch        *b_thetaPFEle;   //!
   TBranch        *b_etaPFEle;   //!
   TBranch        *b_phiPFEle;   //!
   TBranch        *b_pxPFEle;   //!
   TBranch        *b_pyPFEle;   //!
   TBranch        *b_pzPFEle;   //!
   TBranch        *b_vertexXPFEle;   //!
   TBranch        *b_vertexYPFEle;   //!
   TBranch        *b_vertexZPFEle;   //!
   TBranch        *b_MvaOutputPFEle;   //!
   TBranch        *b_PS1EnergyPFEle;   //!
   TBranch        *b_PS2EnergyPFEle;   //!
   TBranch        *b_EcalEnergyPFEle;   //!
   TBranch        *b_HcalEnergyPFEle;   //!
   TBranch        *b_RawEcalEnergyPFEle;   //!
   TBranch        *b_RawHcalEnergyPFEle;   //!
   TBranch        *b_PositionAtEcalXPFEle;   //!
   TBranch        *b_PositionAtEcalYPFEle;   //!
   TBranch        *b_PositionAtEcalZPFEle;   //!
   TBranch        *b_gsfTrackIndexPFEle;   //!
   TBranch        *b_trackIndexPFEle;   //!
   TBranch        *b_chIso03vetoPFEle;   //!
   TBranch        *b_chIso04vetoPFEle;   //!
   TBranch        *b_chIso05vetoPFEle;   //!
   TBranch        *b_chIso03noVetoPFEle;   //!
   TBranch        *b_chIso04noVetoPFEle;   //!
   TBranch        *b_chIso05noVetoPFEle;   //!
   TBranch        *b_chIso03vetoNVCPFEle;   //!
   TBranch        *b_chIso04vetoNVCPFEle;   //!
   TBranch        *b_chIso05vetoNVCPFEle;   //!
   TBranch        *b_chIso03noVetoNVCPFEle;   //!
   TBranch        *b_chIso04noVetoNVCPFEle;   //!
   TBranch        *b_chIso05noVetoNVCPFEle;   //!
   TBranch        *b_nhIso03vetoPFEle;   //!
   TBranch        *b_nhIso04vetoPFEle;   //!
   TBranch        *b_nhIso05vetoPFEle;   //!
   TBranch        *b_nhIso03noVetoPFEle;   //!
   TBranch        *b_nhIso04noVetoPFEle;   //!
   TBranch        *b_nhIso05noVetoPFEle;   //!
   TBranch        *b_phIso03vetoPFEle;   //!
   TBranch        *b_phIso04vetoPFEle;   //!
   TBranch        *b_phIso05vetoPFEle;   //!
   TBranch        *b_phIso03noVetoPFEle;   //!
   TBranch        *b_phIso04noVetoPFEle;   //!
   TBranch        *b_phIso05noVetoPFEle;   //!
   TBranch        *b_nSC;   //!
   TBranch        *b_nBCSC;   //!
   TBranch        *b_nCrystalsSC;   //!
   TBranch        *b_rawEnergySC;   //!
   TBranch        *b_energySC;   //!
   TBranch        *b_etaSC;   //!
   TBranch        *b_thetaSC;   //!
   TBranch        *b_phiSC;   //!
   TBranch        *b_phiWidthSC;   //!
   TBranch        *b_etaWidthSC;   //!
   TBranch        *b_e3x3SC;   //!
   TBranch        *b_e5x5SC;   //!
   TBranch        *b_eMaxSC;   //!
   TBranch        *b_e2x2SC;   //!
   TBranch        *b_e2ndSC;   //!
   TBranch        *b_e1x5SC;   //!
   TBranch        *b_e2x5MaxSC;   //!
   TBranch        *b_e4SwissCrossSC;   //!
   TBranch        *b_covIEtaIEtaSC;   //!
   TBranch        *b_covIEtaIPhiSC;   //!
   TBranch        *b_covIPhiIPhiSC;   //!
   TBranch        *b_hOverESC;   //!
   TBranch        *b_recoFlagSC;   //!
   TBranch        *b_channelStatusSC;   //!
   TBranch        *b_timeSC;   //!
   TBranch        *b_chi2SC;   //!
   TBranch        *b_seedEnergySC;   //!
   TBranch        *b_idClosProblSC;   //!
   TBranch        *b_sevClosProblSC;   //!
   TBranch        *b_fracClosProblSC;   //!
   TBranch        *b_scBasedEcalSum03SC;   //!
   TBranch        *b_scBasedEcalSum04SC;   //!
   TBranch        *b_ecalRecHitSumEtConeDR03SC;   //!
   TBranch        *b_hcalTowerSumEtConeDR03SC;   //!
   TBranch        *b_trkSumPtSolidConeDR03SC;   //!
   TBranch        *b_ecalRecHitSumEtConeDR04SC;   //!
   TBranch        *b_hcalTowerSumEtConeDR04SC;   //!
   TBranch        *b_trkSumPtSolidConeDR04SC;   //!
   TBranch        *b_nPFSC;   //!
   TBranch        *b_nBCPFSC;   //!
   TBranch        *b_nCrystalsPFSC;   //!
   TBranch        *b_rawEnergyPFSC;   //!
   TBranch        *b_energyPFSC;   //!
   TBranch        *b_etaPFSC;   //!
   TBranch        *b_thetaPFSC;   //!
   TBranch        *b_phiPFSC;   //!
   TBranch        *b_phiWidthPFSC;   //!
   TBranch        *b_etaWidthPFSC;   //!
   TBranch        *b_e3x3PFSC;   //!
   TBranch        *b_e5x5PFSC;   //!
   TBranch        *b_eMaxPFSC;   //!
   TBranch        *b_e2x2PFSC;   //!
   TBranch        *b_e2ndPFSC;   //!
   TBranch        *b_e1x5PFSC;   //!
   TBranch        *b_e2x5MaxPFSC;   //!
   TBranch        *b_e4SwissCrossPFSC;   //!
   TBranch        *b_covIEtaIEtaPFSC;   //!
   TBranch        *b_covIEtaIPhiPFSC;   //!
   TBranch        *b_covIPhiIPhiPFSC;   //!
   TBranch        *b_hOverEPFSC;   //!
   TBranch        *b_recoFlagPFSC;   //!
   TBranch        *b_channelStatusPFSC;   //!
   TBranch        *b_timePFSC;   //!
   TBranch        *b_chi2PFSC;   //!
   TBranch        *b_seedEnergyPFSC;   //!
   TBranch        *b_idClosProblPFSC;   //!
   TBranch        *b_sevClosProblPFSC;   //!
   TBranch        *b_fracClosProblPFSC;   //!
   TBranch        *b_scBasedEcalSum03PFSC;   //!
   TBranch        *b_scBasedEcalSum04PFSC;   //!
   TBranch        *b_nBC;   //!
   TBranch        *b_nCrystalsBC;   //!
   TBranch        *b_energyBC;   //!
   TBranch        *b_etaBC;   //!
   TBranch        *b_thetaBC;   //!
   TBranch        *b_phiBC;   //!
   TBranch        *b_e3x3BC;   //!
   TBranch        *b_e5x5BC;   //!
   TBranch        *b_eMaxBC;   //!
   TBranch        *b_e2x2BC;   //!
   TBranch        *b_e2ndBC;   //!
   TBranch        *b_covIEtaIEtaBC;   //!
   TBranch        *b_covIEtaIPhiBC;   //!
   TBranch        *b_covIPhiIPhiBC;   //!
   TBranch        *b_recoFlagBC;   //!
   TBranch        *b_timeBC;   //!
   TBranch        *b_chi2BC;   //!
   TBranch        *b_seedEnergyBC;   //!
   TBranch        *b_idClosProblBC;   //!
   TBranch        *b_sevClosProblBC;   //!
   TBranch        *b_fracClosProblBC;   //!
   TBranch        *b_indexSCBC;   //!
   TBranch        *b_nTrack;   //!
   TBranch        *b_pxTrack;   //!
   TBranch        *b_pyTrack;   //!
   TBranch        *b_pzTrack;   //!
   TBranch        *b_vtxIndexTrack;   //!
   TBranch        *b_vtxWeightTrack;   //!
   TBranch        *b_chargeTrack;   //!
   TBranch        *b_ptErrorTrack;   //!
   TBranch        *b_trackValidHitsTrack;   //!
   TBranch        *b_trackLostHitsTrack;   //!
   TBranch        *b_trackNormalizedChi2Track;   //!
   TBranch        *b_qualityMaskTrack;   //!
   TBranch        *b_impactPar3DTrack;   //!
   TBranch        *b_impactPar3DErrorTrack;   //!
   TBranch        *b_transvImpactParTrack;   //!
   TBranch        *b_transvImpactParErrorTrack;   //!
   TBranch        *b_trackVxTrack;   //!
   TBranch        *b_trackVyTrack;   //!
   TBranch        *b_trackVzTrack;   //!
   TBranch        *b_pxAtOuterTrack;   //!
   TBranch        *b_pyAtOuterTrack;   //!
   TBranch        *b_pzAtOuterTrack;   //!
   TBranch        *b_xAtOuterTrack;   //!
   TBranch        *b_yAtOuterTrack;   //!
   TBranch        *b_zAtOuterTrack;   //!
   TBranch        *b_pxAtInnerTrack;   //!
   TBranch        *b_pyAtInnerTrack;   //!
   TBranch        *b_pzAtInnerTrack;   //!
   TBranch        *b_xAtInnerTrack;   //!
   TBranch        *b_yAtInnerTrack;   //!
   TBranch        *b_zAtInnerTrack;   //!
   TBranch        *b_recHitsSizeTrack;   //!
   TBranch        *b_pixelHitsTrack;   //!
   TBranch        *b_expInnerLayersTrack;   //!
   TBranch        *b_numberOfValidPixelBarrelHitsTrack;   //!
   TBranch        *b_numberOfValidPixelEndcapHitsTrack;   //!
   TBranch        *b_numberOfValidStripTIBHitsTrack;   //!
   TBranch        *b_numberOfValidStripTIDHitsTrack;   //!
   TBranch        *b_numberOfValidStripTOBHitsTrack;   //!
   TBranch        *b_numberOfValidStripTECHitsTrack;   //!
   TBranch        *b_truncatedDeDxTrack;   //!
   TBranch        *b_truncatedDeDxErrorTrack;   //!
   TBranch        *b_truncatedDeDxNoMTrack;   //!
   TBranch        *b_medianDeDxTrack;   //!
   TBranch        *b_medianDeDxErrorTrack;   //!
   TBranch        *b_medianDeDxNoMTrack;   //!
   TBranch        *b_harmonic2DeDxTrack;   //!
   TBranch        *b_harmonic2DeDxErrorTrack;   //!
   TBranch        *b_harmonic2DeDxNoMTrack;   //!
   TBranch        *b_nGsfTrack;   //!
   TBranch        *b_pxGsfTrack;   //!
   TBranch        *b_pyGsfTrack;   //!
   TBranch        *b_pzGsfTrack;   //!
   TBranch        *b_vtxIndexGsfTrack;   //!
   TBranch        *b_vtxWeightGsfTrack;   //!
   TBranch        *b_chargeGsfTrack;   //!
   TBranch        *b_ptErrorGsfTrack;   //!
   TBranch        *b_trackValidHitsGsfTrack;   //!
   TBranch        *b_trackLostHitsGsfTrack;   //!
   TBranch        *b_trackNormalizedChi2GsfTrack;   //!
   TBranch        *b_qualityMaskGsfTrack;   //!
   TBranch        *b_impactPar3DGsfTrack;   //!
   TBranch        *b_impactPar3DErrorGsfTrack;   //!
   TBranch        *b_transvImpactParGsfTrack;   //!
   TBranch        *b_transvImpactParErrorGsfTrack;   //!
   TBranch        *b_trackVxGsfTrack;   //!
   TBranch        *b_trackVyGsfTrack;   //!
   TBranch        *b_trackVzGsfTrack;   //!
   TBranch        *b_pxAtOuterGsfTrack;   //!
   TBranch        *b_pyAtOuterGsfTrack;   //!
   TBranch        *b_pzAtOuterGsfTrack;   //!
   TBranch        *b_xAtOuterGsfTrack;   //!
   TBranch        *b_yAtOuterGsfTrack;   //!
   TBranch        *b_zAtOuterGsfTrack;   //!
   TBranch        *b_pxAtInnerGsfTrack;   //!
   TBranch        *b_pyAtInnerGsfTrack;   //!
   TBranch        *b_pzAtInnerGsfTrack;   //!
   TBranch        *b_xAtInnerGsfTrack;   //!
   TBranch        *b_yAtInnerGsfTrack;   //!
   TBranch        *b_zAtInnerGsfTrack;   //!
   TBranch        *b_recHitsSizeGsfTrack;   //!
   TBranch        *b_pixelHitsGsfTrack;   //!
   TBranch        *b_expInnerLayersGsfTrack;   //!
   TBranch        *b_numberOfValidPixelBarrelHitsGsfTrack;   //!
   TBranch        *b_numberOfValidPixelEndcapHitsGsfTrack;   //!
   TBranch        *b_numberOfValidStripTIBHitsGsfTrack;   //!
   TBranch        *b_numberOfValidStripTIDHitsGsfTrack;   //!
   TBranch        *b_numberOfValidStripTOBHitsGsfTrack;   //!
   TBranch        *b_numberOfValidStripTECHitsGsfTrack;   //!
   TBranch        *b_chargeModeGsfTrack;   //!
   TBranch        *b_pxModeGsfTrack;   //!
   TBranch        *b_pyModeGsfTrack;   //!
   TBranch        *b_pzModeGsfTrack;   //!
   TBranch        *b_recoFlagsGsfTrack;   //!
   TBranch        *b_nGlobalMuonTrack;   //!
   TBranch        *b_pxGlobalMuonTrack;   //!
   TBranch        *b_pyGlobalMuonTrack;   //!
   TBranch        *b_pzGlobalMuonTrack;   //!
   TBranch        *b_vtxIndexGlobalMuonTrack;   //!
   TBranch        *b_vtxWeightGlobalMuonTrack;   //!
   TBranch        *b_chargeGlobalMuonTrack;   //!
   TBranch        *b_ptErrorGlobalMuonTrack;   //!
   TBranch        *b_trackValidHitsGlobalMuonTrack;   //!
   TBranch        *b_trackLostHitsGlobalMuonTrack;   //!
   TBranch        *b_trackNormalizedChi2GlobalMuonTrack;   //!
   TBranch        *b_qualityMaskGlobalMuonTrack;   //!
   TBranch        *b_impactPar3DGlobalMuonTrack;   //!
   TBranch        *b_impactPar3DErrorGlobalMuonTrack;   //!
   TBranch        *b_transvImpactParGlobalMuonTrack;   //!
   TBranch        *b_transvImpactParErrorGlobalMuonTrack;   //!
   TBranch        *b_trackVxGlobalMuonTrack;   //!
   TBranch        *b_trackVyGlobalMuonTrack;   //!
   TBranch        *b_trackVzGlobalMuonTrack;   //!
   TBranch        *b_pxAtOuterGlobalMuonTrack;   //!
   TBranch        *b_pyAtOuterGlobalMuonTrack;   //!
   TBranch        *b_pzAtOuterGlobalMuonTrack;   //!
   TBranch        *b_xAtOuterGlobalMuonTrack;   //!
   TBranch        *b_yAtOuterGlobalMuonTrack;   //!
   TBranch        *b_zAtOuterGlobalMuonTrack;   //!
   TBranch        *b_pxAtInnerGlobalMuonTrack;   //!
   TBranch        *b_pyAtInnerGlobalMuonTrack;   //!
   TBranch        *b_pzAtInnerGlobalMuonTrack;   //!
   TBranch        *b_xAtInnerGlobalMuonTrack;   //!
   TBranch        *b_yAtInnerGlobalMuonTrack;   //!
   TBranch        *b_zAtInnerGlobalMuonTrack;   //!
   TBranch        *b_recHitsSizeGlobalMuonTrack;   //!
   TBranch        *b_pixelHitsGlobalMuonTrack;   //!
   TBranch        *b_expInnerLayersGlobalMuonTrack;   //!
   TBranch        *b_numberOfValidPixelBarrelHitsGlobalMuonTrack;   //!
   TBranch        *b_numberOfValidPixelEndcapHitsGlobalMuonTrack;   //!
   TBranch        *b_numberOfValidStripTIBHitsGlobalMuonTrack;   //!
   TBranch        *b_numberOfValidStripTIDHitsGlobalMuonTrack;   //!
   TBranch        *b_numberOfValidStripTOBHitsGlobalMuonTrack;   //!
   TBranch        *b_numberOfValidStripTECHitsGlobalMuonTrack;   //!
   TBranch        *b_nSTAMuonTrack;   //!
   TBranch        *b_pxSTAMuonTrack;   //!
   TBranch        *b_pySTAMuonTrack;   //!
   TBranch        *b_pzSTAMuonTrack;   //!
   TBranch        *b_vtxIndexSTAMuonTrack;   //!
   TBranch        *b_vtxWeightSTAMuonTrack;   //!
   TBranch        *b_chargeSTAMuonTrack;   //!
   TBranch        *b_ptErrorSTAMuonTrack;   //!
   TBranch        *b_trackValidHitsSTAMuonTrack;   //!
   TBranch        *b_trackLostHitsSTAMuonTrack;   //!
   TBranch        *b_trackNormalizedChi2STAMuonTrack;   //!
   TBranch        *b_qualityMaskSTAMuonTrack;   //!
   TBranch        *b_impactPar3DSTAMuonTrack;   //!
   TBranch        *b_impactPar3DErrorSTAMuonTrack;   //!
   TBranch        *b_transvImpactParSTAMuonTrack;   //!
   TBranch        *b_transvImpactParErrorSTAMuonTrack;   //!
   TBranch        *b_trackVxSTAMuonTrack;   //!
   TBranch        *b_trackVySTAMuonTrack;   //!
   TBranch        *b_trackVzSTAMuonTrack;   //!
   TBranch        *b_pxAtOuterSTAMuonTrack;   //!
   TBranch        *b_pyAtOuterSTAMuonTrack;   //!
   TBranch        *b_pzAtOuterSTAMuonTrack;   //!
   TBranch        *b_xAtOuterSTAMuonTrack;   //!
   TBranch        *b_yAtOuterSTAMuonTrack;   //!
   TBranch        *b_zAtOuterSTAMuonTrack;   //!
   TBranch        *b_pxAtInnerSTAMuonTrack;   //!
   TBranch        *b_pyAtInnerSTAMuonTrack;   //!
   TBranch        *b_pzAtInnerSTAMuonTrack;   //!
   TBranch        *b_xAtInnerSTAMuonTrack;   //!
   TBranch        *b_yAtInnerSTAMuonTrack;   //!
   TBranch        *b_zAtInnerSTAMuonTrack;   //!
   TBranch        *b_recHitsSizeSTAMuonTrack;   //!
   TBranch        *b_pixelHitsSTAMuonTrack;   //!
   TBranch        *b_expInnerLayersSTAMuonTrack;   //!
   TBranch        *b_numberOfValidPixelBarrelHitsSTAMuonTrack;   //!
   TBranch        *b_numberOfValidPixelEndcapHitsSTAMuonTrack;   //!
   TBranch        *b_numberOfValidStripTIBHitsSTAMuonTrack;   //!
   TBranch        *b_numberOfValidStripTIDHitsSTAMuonTrack;   //!
   TBranch        *b_numberOfValidStripTOBHitsSTAMuonTrack;   //!
   TBranch        *b_numberOfValidStripTECHitsSTAMuonTrack;   //!
   TBranch        *b_nPV;   //!
   TBranch        *b_PVxPV;   //!
   TBranch        *b_PVyPV;   //!
   TBranch        *b_PVzPV;   //!
   TBranch        *b_PVErrxPV;   //!
   TBranch        *b_PVErryPV;   //!
   TBranch        *b_PVErrzPV;   //!
   TBranch        *b_SumPtPV;   //!
   TBranch        *b_ndofPV;   //!
   TBranch        *b_chi2PV;   //!
   TBranch        *b_nMuon;   //!
   TBranch        *b_chargeMuon;   //!
   TBranch        *b_energyMuon;   //!
   TBranch        *b_thetaMuon;   //!
   TBranch        *b_etaMuon;   //!
   TBranch        *b_phiMuon;   //!
   TBranch        *b_pxMuon;   //!
   TBranch        *b_pyMuon;   //!
   TBranch        *b_pzMuon;   //!
   TBranch        *b_vertexXMuon;   //!
   TBranch        *b_vertexYMuon;   //!
   TBranch        *b_vertexZMuon;   //!
   TBranch        *b_trackIndexMuon;   //!
   TBranch        *b_standAloneTrackIndexMuon;   //!
   TBranch        *b_combinedTrackIndexMuon;   //!
   TBranch        *b_muonIdMuon;   //!
   TBranch        *b_sumPt03Muon;   //!
   TBranch        *b_emEt03Muon;   //!
   TBranch        *b_hadEt03Muon;   //!
   TBranch        *b_hoEt03Muon;   //!
   TBranch        *b_nTrk03Muon;   //!
   TBranch        *b_nJets03Muon;   //!
   TBranch        *b_sumPt05Muon;   //!
   TBranch        *b_emEt05Muon;   //!
   TBranch        *b_hadEt05Muon;   //!
   TBranch        *b_hoEt05Muon;   //!
   TBranch        *b_nTrk05Muon;   //!
   TBranch        *b_nJets05Muon;   //!
   TBranch        *b_EcalExpDepoMuon;   //!
   TBranch        *b_HcalExpDepoMuon;   //!
   TBranch        *b_HoExpDepoMuon;   //!
   TBranch        *b_emS9Muon;   //!
   TBranch        *b_hadS9Muon;   //!
   TBranch        *b_hoS9Muon;   //!
   TBranch        *b_CaloCompMuon;   //!
   TBranch        *b_nMet;   //!
   TBranch        *b_chargeMet;   //!
   TBranch        *b_energyMet;   //!
   TBranch        *b_thetaMet;   //!
   TBranch        *b_etaMet;   //!
   TBranch        *b_phiMet;   //!
   TBranch        *b_pxMet;   //!
   TBranch        *b_pyMet;   //!
   TBranch        *b_pzMet;   //!
   TBranch        *b_vertexXMet;   //!
   TBranch        *b_vertexYMet;   //!
   TBranch        *b_vertexZMet;   //!
   TBranch        *b_nTCMet;   //!
   TBranch        *b_chargeTCMet;   //!
   TBranch        *b_energyTCMet;   //!
   TBranch        *b_thetaTCMet;   //!
   TBranch        *b_etaTCMet;   //!
   TBranch        *b_phiTCMet;   //!
   TBranch        *b_pxTCMet;   //!
   TBranch        *b_pyTCMet;   //!
   TBranch        *b_pzTCMet;   //!
   TBranch        *b_vertexXTCMet;   //!
   TBranch        *b_vertexYTCMet;   //!
   TBranch        *b_vertexZTCMet;   //!
   TBranch        *b_nPFMet;   //!
   TBranch        *b_chargePFMet;   //!
   TBranch        *b_energyPFMet;   //!
   TBranch        *b_thetaPFMet;   //!
   TBranch        *b_etaPFMet;   //!
   TBranch        *b_phiPFMet;   //!
   TBranch        *b_pxPFMet;   //!
   TBranch        *b_pyPFMet;   //!
   TBranch        *b_pzPFMet;   //!
   TBranch        *b_vertexXPFMet;   //!
   TBranch        *b_vertexYPFMet;   //!
   TBranch        *b_vertexZPFMet;   //!
   TBranch        *b_nGenMet;   //!
   TBranch        *b_chargeGenMet;   //!
   TBranch        *b_energyGenMet;   //!
   TBranch        *b_thetaGenMet;   //!
   TBranch        *b_etaGenMet;   //!
   TBranch        *b_phiGenMet;   //!
   TBranch        *b_pxGenMet;   //!
   TBranch        *b_pyGenMet;   //!
   TBranch        *b_pzGenMet;   //!
   TBranch        *b_vertexXGenMet;   //!
   TBranch        *b_vertexYGenMet;   //!
   TBranch        *b_vertexZGenMet;   //!
   TBranch        *b_nAK5Jet;   //!
   TBranch        *b_chargeAK5Jet;   //!
   TBranch        *b_energyAK5Jet;   //!
   TBranch        *b_thetaAK5Jet;   //!
   TBranch        *b_etaAK5Jet;   //!
   TBranch        *b_phiAK5Jet;   //!
   TBranch        *b_pxAK5Jet;   //!
   TBranch        *b_pyAK5Jet;   //!
   TBranch        *b_pzAK5Jet;   //!
   TBranch        *b_vertexXAK5Jet;   //!
   TBranch        *b_vertexYAK5Jet;   //!
   TBranch        *b_vertexZAK5Jet;   //!
   TBranch        *b_alphaAK5Jet;   //!
   TBranch        *b_emFracAK5Jet;   //!
   TBranch        *b_hadFracAK5Jet;   //!
   TBranch        *b_IdAK5Jet;   //!
   TBranch        *b_nHitAK5Jet;   //!
   TBranch        *b_nHit90AK5Jet;   //!
   TBranch        *b_fHPDAK5Jet;   //!
   TBranch        *b_covEtaEtaAK5Jet;   //!
   TBranch        *b_covPhiPhiAK5Jet;   //!
   TBranch        *b_fLSAK5Jet;   //!
   TBranch        *b_fOOTAK5Jet;   //!
   TBranch        *b_combinedSecondaryVertexBJetTagsAK5Jet;   //!
   TBranch        *b_combinedSecondaryVertexMVABJetTagsAK5Jet;   //!
   TBranch        *b_jetBProbabilityBJetTagsAK5Jet;   //!
   TBranch        *b_jetProbabilityBJetTagsAK5Jet;   //!
   TBranch        *b_simpleSecondaryVertexBJetTagsAK5Jet;   //!
   TBranch        *b_softMuonBJetTagsAK5Jet;   //!
   TBranch        *b_softMuonByIP3dBJetTagsAK5Jet;   //!
   TBranch        *b_softMuonByPtBJetTagsAK5Jet;   //!
   TBranch        *b_softElectronBJetTagsAK5Jet;   //!
   TBranch        *b_softElectronByIP3dBJetTagsAK5Jet;   //!
   TBranch        *b_softElectronByPtBJetTagsAK5Jet;   //!
   TBranch        *b_trackCountingHighPurBJetTagsAK5Jet;   //!
   TBranch        *b_trackCountingHighEffBJetTagsAK5Jet;   //!
   TBranch        *b_uncorrEnergyAK5Jet;   //!
   TBranch        *b_nAK5PFJet;   //!
   TBranch        *b_chargeAK5PFJet;   //!
   TBranch        *b_energyAK5PFJet;   //!
   TBranch        *b_thetaAK5PFJet;   //!
   TBranch        *b_etaAK5PFJet;   //!
   TBranch        *b_phiAK5PFJet;   //!
   TBranch        *b_pxAK5PFJet;   //!
   TBranch        *b_pyAK5PFJet;   //!
   TBranch        *b_pzAK5PFJet;   //!
   TBranch        *b_vertexXAK5PFJet;   //!
   TBranch        *b_vertexYAK5PFJet;   //!
   TBranch        *b_vertexZAK5PFJet;   //!
   TBranch        *b_chargedHadronEnergyAK5PFJet;   //!
   TBranch        *b_neutralHadronEnergyAK5PFJet;   //!
   TBranch        *b_chargedEmEnergyAK5PFJet;   //!
   TBranch        *b_neutralEmEnergyAK5PFJet;   //!
   TBranch        *b_neutralMultiplicityAK5PFJet;   //!
   TBranch        *b_chargedMultiplicityAK5PFJet;   //!
   TBranch        *b_muonMultiplicityAK5PFJet;   //!
   TBranch        *b_uncorrEnergyAK5PFJet;   //!
   TBranch        *b_nAK5GenJet;   //!
   TBranch        *b_chargeAK5GenJet;   //!
   TBranch        *b_energyAK5GenJet;   //!
   TBranch        *b_thetaAK5GenJet;   //!
   TBranch        *b_etaAK5GenJet;   //!
   TBranch        *b_phiAK5GenJet;   //!
   TBranch        *b_pxAK5GenJet;   //!
   TBranch        *b_pyAK5GenJet;   //!
   TBranch        *b_pzAK5GenJet;   //!
   TBranch        *b_vertexXAK5GenJet;   //!
   TBranch        *b_vertexYAK5GenJet;   //!
   TBranch        *b_vertexZAK5GenJet;   //!
   TBranch        *b_genPtHat;   //!
   TBranch        *b_genProcessId;   //!
   TBranch        *b_genWeight;   //!
   TBranch        *b_genAlphaQCD;   //!
   TBranch        *b_genAlphaQED;   //!

   HiggsBase(TTree *tree=0);
   virtual ~HiggsBase();
   virtual Int_t    Cut(Long64_t entry);
   virtual Int_t    GetEntry(Long64_t entry);
   virtual Long64_t LoadTree(Long64_t entry);
   virtual void     Init(TTree *tree);
   virtual void     Loop();
   virtual Bool_t   Notify();
   virtual void     Show(Long64_t entry = -1);
};

#endif

#ifdef HiggsBase_cxx
HiggsBase::HiggsBase(TTree *tree)
{
// if parameter tree is not specified (or zero), connect the file
// used to generate this class and read the Tree.
   if (tree == 0) {
      TFile *f = (TFile*)gROOT->GetListOfFiles()->FindObject("/tmp/crovelli/default_MC_9_1.root");
      if (!f) {
         f = new TFile("/tmp/crovelli/default_MC_9_1.root");
      }
      tree = (TTree*)gDirectory->Get("ntp1");

   }
   Init(tree);
}

HiggsBase::~HiggsBase()
{
   if (!fChain) return;
   delete fChain->GetCurrentFile();
}

Int_t HiggsBase::GetEntry(Long64_t entry)
{
// Read contents of entry.
   if (!fChain) return 0;
   return fChain->GetEntry(entry);
}
Long64_t HiggsBase::LoadTree(Long64_t entry)
{
// Set the environment to read one entry
   if (!fChain) return -5;
   Long64_t centry = fChain->LoadTree(entry);
   if (centry < 0) return centry;
   if (!fChain->InheritsFrom(TChain::Class()))  return centry;
   TChain *chain = (TChain*)fChain;
   if (chain->GetTreeNumber() != fCurrent) {
      fCurrent = chain->GetTreeNumber();
      Notify();
   }
   return centry;
}

void HiggsBase::Init(TTree *tree)
{
   // The Init() function is called when the selector needs to initialize
   // a new tree or chain. Typically here the branch addresses and branch
   // pointers of the tree will be set.
   // It is normally not necessary to make changes to the generated
   // code, but the routine can be extended by the user if needed.
   // Init() will be called many times when running on PROOF
   // (once per file to be processed).

   // Set object pointer
   nameHLT = 0;
   // Set branch addresses and branch pointers
   if (!tree) return;
   fChain = tree;
   fCurrent = -1;
   fChain->SetMakeClass(1);

   fChain->SetBranchAddress("nl1Technical", &nl1Technical, &b_nl1Technical);
   fChain->SetBranchAddress("l1Technical", l1Technical, &b_l1Technical);
   fChain->SetBranchAddress("nl1Global", &nl1Global, &b_nl1Global);
   fChain->SetBranchAddress("l1Global", l1Global, &b_l1Global);
   fChain->SetBranchAddress("runNumber", &runNumber, &b_runNumber);
   fChain->SetBranchAddress("eventNumber", &eventNumber, &b_eventNumber);
   fChain->SetBranchAddress("lumiBlock", &lumiBlock, &b_lumiBlock);
   fChain->SetBranchAddress("bunchCrossing", &bunchCrossing, &b_bunchCrossing);
   fChain->SetBranchAddress("orbitNumber", &orbitNumber, &b_orbitNumber);
   fChain->SetBranchAddress("nMc", &nMc, &b_nMc);
   fChain->SetBranchAddress("pMc", pMc, &b_pMc);
   fChain->SetBranchAddress("thetaMc", thetaMc, &b_thetaMc);
   fChain->SetBranchAddress("etaMc", etaMc, &b_etaMc);
   fChain->SetBranchAddress("phiMc", phiMc, &b_phiMc);
   fChain->SetBranchAddress("energyMc", energyMc, &b_energyMc);
   fChain->SetBranchAddress("idMc", idMc, &b_idMc);
   fChain->SetBranchAddress("mothMc", mothMc, &b_mothMc);
   fChain->SetBranchAddress("statusMc", statusMc, &b_statusMc);
   fChain->SetBranchAddress("nTrg", &nTrg, &b_nTrg);
   fChain->SetBranchAddress("firedTrg", firedTrg, &b_firedTrg);
   fChain->SetBranchAddress("nHLT", &nHLT, &b_nHLT);
   fChain->SetBranchAddress("nameHLT", &nameHLT, &b_nameHLT);
   fChain->SetBranchAddress("indexHLT", indexHLT, &b_indexHLT);
   fChain->SetBranchAddress("nEle", &nEle, &b_nEle);
   fChain->SetBranchAddress("chargeEle", chargeEle, &b_chargeEle);
   fChain->SetBranchAddress("energyEle", energyEle, &b_energyEle);
   fChain->SetBranchAddress("thetaEle", thetaEle, &b_thetaEle);
   fChain->SetBranchAddress("etaEle", etaEle, &b_etaEle);
   fChain->SetBranchAddress("phiEle", phiEle, &b_phiEle);
   fChain->SetBranchAddress("pxEle", pxEle, &b_pxEle);
   fChain->SetBranchAddress("pyEle", pyEle, &b_pyEle);
   fChain->SetBranchAddress("pzEle", pzEle, &b_pzEle);
   fChain->SetBranchAddress("vertexXEle", vertexXEle, &b_vertexXEle);
   fChain->SetBranchAddress("vertexYEle", vertexYEle, &b_vertexYEle);
   fChain->SetBranchAddress("vertexZEle", vertexZEle, &b_vertexZEle);
   fChain->SetBranchAddress("fiducialFlagsEle", fiducialFlagsEle, &b_fiducialFlagsEle);
   fChain->SetBranchAddress("recoFlagsEle", recoFlagsEle, &b_recoFlagsEle);
   fChain->SetBranchAddress("energyCorrectionsEle", energyCorrectionsEle, &b_energyCorrectionsEle);
   fChain->SetBranchAddress("esEnergyEle", esEnergyEle, &b_esEnergyEle);
   fChain->SetBranchAddress("superClusterIndexEle", superClusterIndexEle, &b_superClusterIndexEle);
   fChain->SetBranchAddress("PFsuperClusterIndexEle", PFsuperClusterIndexEle, &b_PFsuperClusterIndexEle);
   fChain->SetBranchAddress("trackIndexEle", trackIndexEle, &b_trackIndexEle);
   fChain->SetBranchAddress("gsfTrackIndexEle", gsfTrackIndexEle, &b_gsfTrackIndexEle);
   fChain->SetBranchAddress("convDistEle", convDistEle, &b_convDistEle);
   fChain->SetBranchAddress("convDcotEle", convDcotEle, &b_convDcotEle);
   fChain->SetBranchAddress("convRadiusEle", convRadiusEle, &b_convRadiusEle);
   fChain->SetBranchAddress("convTrackIndexEle", convTrackIndexEle, &b_convTrackIndexEle);
   fChain->SetBranchAddress("convXEle", convXEle, &b_convXEle);
   fChain->SetBranchAddress("convYEle", convYEle, &b_convYEle);
   fChain->SetBranchAddress("convZEle", convZEle, &b_convZEle);
   fChain->SetBranchAddress("convChi2ProbEle", convChi2ProbEle, &b_convChi2ProbEle);
   fChain->SetBranchAddress("scPixChargeEle", scPixChargeEle, &b_scPixChargeEle);
   fChain->SetBranchAddress("classificationEle", classificationEle, &b_classificationEle);
   fChain->SetBranchAddress("standardClassificationEle", standardClassificationEle, &b_standardClassificationEle);
   fChain->SetBranchAddress("fbremEle", fbremEle, &b_fbremEle);
   fChain->SetBranchAddress("nbremsEle", nbremsEle, &b_nbremsEle);
   fChain->SetBranchAddress("hOverEEle", hOverEEle, &b_hOverEEle);
   fChain->SetBranchAddress("eSuperClusterOverPEle", eSuperClusterOverPEle, &b_eSuperClusterOverPEle);
   fChain->SetBranchAddress("eSeedOverPoutEle", eSeedOverPoutEle, &b_eSeedOverPoutEle);
   fChain->SetBranchAddress("deltaEtaAtVtxEle", deltaEtaAtVtxEle, &b_deltaEtaAtVtxEle);
   fChain->SetBranchAddress("deltaPhiAtVtxEle", deltaPhiAtVtxEle, &b_deltaPhiAtVtxEle);
   fChain->SetBranchAddress("deltaEtaAtCaloEle", deltaEtaAtCaloEle, &b_deltaEtaAtCaloEle);
   fChain->SetBranchAddress("deltaPhiAtCaloEle", deltaPhiAtCaloEle, &b_deltaPhiAtCaloEle);
   fChain->SetBranchAddress("tipEle", tipEle, &b_tipEle);
   fChain->SetBranchAddress("dr03TkSumPtEle", dr03TkSumPtEle, &b_dr03TkSumPtEle);
   fChain->SetBranchAddress("dr03EcalRecHitSumEtEle", dr03EcalRecHitSumEtEle, &b_dr03EcalRecHitSumEtEle);
   fChain->SetBranchAddress("dr03HcalTowerSumEtEle", dr03HcalTowerSumEtEle, &b_dr03HcalTowerSumEtEle);
   fChain->SetBranchAddress("dr04TkSumPtEle", dr04TkSumPtEle, &b_dr04TkSumPtEle);
   fChain->SetBranchAddress("dr04EcalRecHitSumEtEle", dr04EcalRecHitSumEtEle, &b_dr04EcalRecHitSumEtEle);
   fChain->SetBranchAddress("dr04HcalTowerSumEtEle", dr04HcalTowerSumEtEle, &b_dr04HcalTowerSumEtEle);
   fChain->SetBranchAddress("scBasedEcalSum03Ele", scBasedEcalSum03Ele, &b_scBasedEcalSum03Ele);
   fChain->SetBranchAddress("scBasedEcalSum04Ele", scBasedEcalSum04Ele, &b_scBasedEcalSum04Ele);
   fChain->SetBranchAddress("eleIdCutsEle", eleIdCutsEle, &b_eleIdCutsEle);
   fChain->SetBranchAddress("eleIdLikelihoodEle", eleIdLikelihoodEle, &b_eleIdLikelihoodEle);
   fChain->SetBranchAddress("pflowMVAEle", pflowMVAEle, &b_pflowMVAEle);
   fChain->SetBranchAddress("nPFEle", &nPFEle, &b_nPFEle);
   fChain->SetBranchAddress("chargePFEle", chargePFEle, &b_chargePFEle);
   fChain->SetBranchAddress("energyPFEle", energyPFEle, &b_energyPFEle);
   fChain->SetBranchAddress("thetaPFEle", thetaPFEle, &b_thetaPFEle);
   fChain->SetBranchAddress("etaPFEle", etaPFEle, &b_etaPFEle);
   fChain->SetBranchAddress("phiPFEle", phiPFEle, &b_phiPFEle);
   fChain->SetBranchAddress("pxPFEle", pxPFEle, &b_pxPFEle);
   fChain->SetBranchAddress("pyPFEle", pyPFEle, &b_pyPFEle);
   fChain->SetBranchAddress("pzPFEle", pzPFEle, &b_pzPFEle);
   fChain->SetBranchAddress("vertexXPFEle", vertexXPFEle, &b_vertexXPFEle);
   fChain->SetBranchAddress("vertexYPFEle", vertexYPFEle, &b_vertexYPFEle);
   fChain->SetBranchAddress("vertexZPFEle", vertexZPFEle, &b_vertexZPFEle);
   fChain->SetBranchAddress("MvaOutputPFEle", MvaOutputPFEle, &b_MvaOutputPFEle);
   fChain->SetBranchAddress("PS1EnergyPFEle", PS1EnergyPFEle, &b_PS1EnergyPFEle);
   fChain->SetBranchAddress("PS2EnergyPFEle", PS2EnergyPFEle, &b_PS2EnergyPFEle);
   fChain->SetBranchAddress("EcalEnergyPFEle", EcalEnergyPFEle, &b_EcalEnergyPFEle);
   fChain->SetBranchAddress("HcalEnergyPFEle", HcalEnergyPFEle, &b_HcalEnergyPFEle);
   fChain->SetBranchAddress("RawEcalEnergyPFEle", RawEcalEnergyPFEle, &b_RawEcalEnergyPFEle);
   fChain->SetBranchAddress("RawHcalEnergyPFEle", RawHcalEnergyPFEle, &b_RawHcalEnergyPFEle);
   fChain->SetBranchAddress("PositionAtEcalXPFEle", PositionAtEcalXPFEle, &b_PositionAtEcalXPFEle);
   fChain->SetBranchAddress("PositionAtEcalYPFEle", PositionAtEcalYPFEle, &b_PositionAtEcalYPFEle);
   fChain->SetBranchAddress("PositionAtEcalZPFEle", PositionAtEcalZPFEle, &b_PositionAtEcalZPFEle);
   fChain->SetBranchAddress("gsfTrackIndexPFEle", gsfTrackIndexPFEle, &b_gsfTrackIndexPFEle);
   fChain->SetBranchAddress("trackIndexPFEle", trackIndexPFEle, &b_trackIndexPFEle);
   fChain->SetBranchAddress("chIso03vetoPFEle", chIso03vetoPFEle, &b_chIso03vetoPFEle);
   fChain->SetBranchAddress("chIso04vetoPFEle", chIso04vetoPFEle, &b_chIso04vetoPFEle);
   fChain->SetBranchAddress("chIso05vetoPFEle", chIso05vetoPFEle, &b_chIso05vetoPFEle);
   fChain->SetBranchAddress("chIso03noVetoPFEle", chIso03noVetoPFEle, &b_chIso03noVetoPFEle);
   fChain->SetBranchAddress("chIso04noVetoPFEle", chIso04noVetoPFEle, &b_chIso04noVetoPFEle);
   fChain->SetBranchAddress("chIso05noVetoPFEle", chIso05noVetoPFEle, &b_chIso05noVetoPFEle);
   fChain->SetBranchAddress("chIso03vetoNVCPFEle", chIso03vetoNVCPFEle, &b_chIso03vetoNVCPFEle);
   fChain->SetBranchAddress("chIso04vetoNVCPFEle", chIso04vetoNVCPFEle, &b_chIso04vetoNVCPFEle);
   fChain->SetBranchAddress("chIso05vetoNVCPFEle", chIso05vetoNVCPFEle, &b_chIso05vetoNVCPFEle);
   fChain->SetBranchAddress("chIso03noVetoNVCPFEle", chIso03noVetoNVCPFEle, &b_chIso03noVetoNVCPFEle);
   fChain->SetBranchAddress("chIso04noVetoNVCPFEle", chIso04noVetoNVCPFEle, &b_chIso04noVetoNVCPFEle);
   fChain->SetBranchAddress("chIso05noVetoNVCPFEle", chIso05noVetoNVCPFEle, &b_chIso05noVetoNVCPFEle);
   fChain->SetBranchAddress("nhIso03vetoPFEle", nhIso03vetoPFEle, &b_nhIso03vetoPFEle);
   fChain->SetBranchAddress("nhIso04vetoPFEle", nhIso04vetoPFEle, &b_nhIso04vetoPFEle);
   fChain->SetBranchAddress("nhIso05vetoPFEle", nhIso05vetoPFEle, &b_nhIso05vetoPFEle);
   fChain->SetBranchAddress("nhIso03noVetoPFEle", nhIso03noVetoPFEle, &b_nhIso03noVetoPFEle);
   fChain->SetBranchAddress("nhIso04noVetoPFEle", nhIso04noVetoPFEle, &b_nhIso04noVetoPFEle);
   fChain->SetBranchAddress("nhIso05noVetoPFEle", nhIso05noVetoPFEle, &b_nhIso05noVetoPFEle);
   fChain->SetBranchAddress("phIso03vetoPFEle", phIso03vetoPFEle, &b_phIso03vetoPFEle);
   fChain->SetBranchAddress("phIso04vetoPFEle", phIso04vetoPFEle, &b_phIso04vetoPFEle);
   fChain->SetBranchAddress("phIso05vetoPFEle", phIso05vetoPFEle, &b_phIso05vetoPFEle);
   fChain->SetBranchAddress("phIso03noVetoPFEle", phIso03noVetoPFEle, &b_phIso03noVetoPFEle);
   fChain->SetBranchAddress("phIso04noVetoPFEle", phIso04noVetoPFEle, &b_phIso04noVetoPFEle);
   fChain->SetBranchAddress("phIso05noVetoPFEle", phIso05noVetoPFEle, &b_phIso05noVetoPFEle);
   fChain->SetBranchAddress("nSC", &nSC, &b_nSC);
   fChain->SetBranchAddress("nBCSC", nBCSC, &b_nBCSC);
   fChain->SetBranchAddress("nCrystalsSC", nCrystalsSC, &b_nCrystalsSC);
   fChain->SetBranchAddress("rawEnergySC", rawEnergySC, &b_rawEnergySC);
   fChain->SetBranchAddress("energySC", energySC, &b_energySC);
   fChain->SetBranchAddress("etaSC", etaSC, &b_etaSC);
   fChain->SetBranchAddress("thetaSC", thetaSC, &b_thetaSC);
   fChain->SetBranchAddress("phiSC", phiSC, &b_phiSC);
   fChain->SetBranchAddress("phiWidthSC", phiWidthSC, &b_phiWidthSC);
   fChain->SetBranchAddress("etaWidthSC", etaWidthSC, &b_etaWidthSC);
   fChain->SetBranchAddress("e3x3SC", e3x3SC, &b_e3x3SC);
   fChain->SetBranchAddress("e5x5SC", e5x5SC, &b_e5x5SC);
   fChain->SetBranchAddress("eMaxSC", eMaxSC, &b_eMaxSC);
   fChain->SetBranchAddress("e2x2SC", e2x2SC, &b_e2x2SC);
   fChain->SetBranchAddress("e2ndSC", e2ndSC, &b_e2ndSC);
   fChain->SetBranchAddress("e1x5SC", e1x5SC, &b_e1x5SC);
   fChain->SetBranchAddress("e2x5MaxSC", e2x5MaxSC, &b_e2x5MaxSC);
   fChain->SetBranchAddress("e4SwissCrossSC", e4SwissCrossSC, &b_e4SwissCrossSC);
   fChain->SetBranchAddress("covIEtaIEtaSC", covIEtaIEtaSC, &b_covIEtaIEtaSC);
   fChain->SetBranchAddress("covIEtaIPhiSC", covIEtaIPhiSC, &b_covIEtaIPhiSC);
   fChain->SetBranchAddress("covIPhiIPhiSC", covIPhiIPhiSC, &b_covIPhiIPhiSC);
   fChain->SetBranchAddress("hOverESC", hOverESC, &b_hOverESC);
   fChain->SetBranchAddress("recoFlagSC", recoFlagSC, &b_recoFlagSC);
   fChain->SetBranchAddress("channelStatusSC", channelStatusSC, &b_channelStatusSC);
   fChain->SetBranchAddress("timeSC", timeSC, &b_timeSC);
   fChain->SetBranchAddress("chi2SC", chi2SC, &b_chi2SC);
   fChain->SetBranchAddress("seedEnergySC", seedEnergySC, &b_seedEnergySC);
   fChain->SetBranchAddress("idClosProblSC", idClosProblSC, &b_idClosProblSC);
   fChain->SetBranchAddress("sevClosProblSC", sevClosProblSC, &b_sevClosProblSC);
   fChain->SetBranchAddress("fracClosProblSC", fracClosProblSC, &b_fracClosProblSC);
   fChain->SetBranchAddress("scBasedEcalSum03SC", scBasedEcalSum03SC, &b_scBasedEcalSum03SC);
   fChain->SetBranchAddress("scBasedEcalSum04SC", scBasedEcalSum04SC, &b_scBasedEcalSum04SC);
   fChain->SetBranchAddress("ecalRecHitSumEtConeDR03SC", ecalRecHitSumEtConeDR03SC, &b_ecalRecHitSumEtConeDR03SC);
   fChain->SetBranchAddress("hcalTowerSumEtConeDR03SC", hcalTowerSumEtConeDR03SC, &b_hcalTowerSumEtConeDR03SC);
   fChain->SetBranchAddress("trkSumPtSolidConeDR03SC", trkSumPtSolidConeDR03SC, &b_trkSumPtSolidConeDR03SC);
   fChain->SetBranchAddress("ecalRecHitSumEtConeDR04SC", ecalRecHitSumEtConeDR04SC, &b_ecalRecHitSumEtConeDR04SC);
   fChain->SetBranchAddress("hcalTowerSumEtConeDR04SC", hcalTowerSumEtConeDR04SC, &b_hcalTowerSumEtConeDR04SC);
   fChain->SetBranchAddress("trkSumPtSolidConeDR04SC", trkSumPtSolidConeDR04SC, &b_trkSumPtSolidConeDR04SC);
   fChain->SetBranchAddress("nPFSC", &nPFSC, &b_nPFSC);
   fChain->SetBranchAddress("nBCPFSC", nBCPFSC, &b_nBCPFSC);
   fChain->SetBranchAddress("nCrystalsPFSC", nCrystalsPFSC, &b_nCrystalsPFSC);
   fChain->SetBranchAddress("rawEnergyPFSC", rawEnergyPFSC, &b_rawEnergyPFSC);
   fChain->SetBranchAddress("energyPFSC", energyPFSC, &b_energyPFSC);
   fChain->SetBranchAddress("etaPFSC", etaPFSC, &b_etaPFSC);
   fChain->SetBranchAddress("thetaPFSC", thetaPFSC, &b_thetaPFSC);
   fChain->SetBranchAddress("phiPFSC", phiPFSC, &b_phiPFSC);
   fChain->SetBranchAddress("phiWidthPFSC", phiWidthPFSC, &b_phiWidthPFSC);
   fChain->SetBranchAddress("etaWidthPFSC", etaWidthPFSC, &b_etaWidthPFSC);
   fChain->SetBranchAddress("e3x3PFSC", e3x3PFSC, &b_e3x3PFSC);
   fChain->SetBranchAddress("e5x5PFSC", e5x5PFSC, &b_e5x5PFSC);
   fChain->SetBranchAddress("eMaxPFSC", eMaxPFSC, &b_eMaxPFSC);
   fChain->SetBranchAddress("e2x2PFSC", e2x2PFSC, &b_e2x2PFSC);
   fChain->SetBranchAddress("e2ndPFSC", e2ndPFSC, &b_e2ndPFSC);
   fChain->SetBranchAddress("e1x5PFSC", e1x5PFSC, &b_e1x5PFSC);
   fChain->SetBranchAddress("e2x5MaxPFSC", e2x5MaxPFSC, &b_e2x5MaxPFSC);
   fChain->SetBranchAddress("e4SwissCrossPFSC", e4SwissCrossPFSC, &b_e4SwissCrossPFSC);
   fChain->SetBranchAddress("covIEtaIEtaPFSC", covIEtaIEtaPFSC, &b_covIEtaIEtaPFSC);
   fChain->SetBranchAddress("covIEtaIPhiPFSC", covIEtaIPhiPFSC, &b_covIEtaIPhiPFSC);
   fChain->SetBranchAddress("covIPhiIPhiPFSC", covIPhiIPhiPFSC, &b_covIPhiIPhiPFSC);
   fChain->SetBranchAddress("hOverEPFSC", hOverEPFSC, &b_hOverEPFSC);
   fChain->SetBranchAddress("recoFlagPFSC", recoFlagPFSC, &b_recoFlagPFSC);
   fChain->SetBranchAddress("channelStatusPFSC", channelStatusPFSC, &b_channelStatusPFSC);
   fChain->SetBranchAddress("timePFSC", timePFSC, &b_timePFSC);
   fChain->SetBranchAddress("chi2PFSC", chi2PFSC, &b_chi2PFSC);
   fChain->SetBranchAddress("seedEnergyPFSC", seedEnergyPFSC, &b_seedEnergyPFSC);
   fChain->SetBranchAddress("idClosProblPFSC", idClosProblPFSC, &b_idClosProblPFSC);
   fChain->SetBranchAddress("sevClosProblPFSC", sevClosProblPFSC, &b_sevClosProblPFSC);
   fChain->SetBranchAddress("fracClosProblPFSC", fracClosProblPFSC, &b_fracClosProblPFSC);
   fChain->SetBranchAddress("scBasedEcalSum03PFSC", scBasedEcalSum03PFSC, &b_scBasedEcalSum03PFSC);
   fChain->SetBranchAddress("scBasedEcalSum04PFSC", scBasedEcalSum04PFSC, &b_scBasedEcalSum04PFSC);
   fChain->SetBranchAddress("nBC", &nBC, &b_nBC);
   fChain->SetBranchAddress("nCrystalsBC", nCrystalsBC, &b_nCrystalsBC);
   fChain->SetBranchAddress("energyBC", energyBC, &b_energyBC);
   fChain->SetBranchAddress("etaBC", etaBC, &b_etaBC);
   fChain->SetBranchAddress("thetaBC", thetaBC, &b_thetaBC);
   fChain->SetBranchAddress("phiBC", phiBC, &b_phiBC);
   fChain->SetBranchAddress("e3x3BC", e3x3BC, &b_e3x3BC);
   fChain->SetBranchAddress("e5x5BC", e5x5BC, &b_e5x5BC);
   fChain->SetBranchAddress("eMaxBC", eMaxBC, &b_eMaxBC);
   fChain->SetBranchAddress("e2x2BC", e2x2BC, &b_e2x2BC);
   fChain->SetBranchAddress("e2ndBC", e2ndBC, &b_e2ndBC);
   fChain->SetBranchAddress("covIEtaIEtaBC", covIEtaIEtaBC, &b_covIEtaIEtaBC);
   fChain->SetBranchAddress("covIEtaIPhiBC", covIEtaIPhiBC, &b_covIEtaIPhiBC);
   fChain->SetBranchAddress("covIPhiIPhiBC", covIPhiIPhiBC, &b_covIPhiIPhiBC);
   fChain->SetBranchAddress("recoFlagBC", recoFlagBC, &b_recoFlagBC);
   fChain->SetBranchAddress("timeBC", timeBC, &b_timeBC);
   fChain->SetBranchAddress("chi2BC", chi2BC, &b_chi2BC);
   fChain->SetBranchAddress("seedEnergyBC", seedEnergyBC, &b_seedEnergyBC);
   fChain->SetBranchAddress("idClosProblBC", idClosProblBC, &b_idClosProblBC);
   fChain->SetBranchAddress("sevClosProblBC", sevClosProblBC, &b_sevClosProblBC);
   fChain->SetBranchAddress("fracClosProblBC", fracClosProblBC, &b_fracClosProblBC);
   fChain->SetBranchAddress("indexSCBC", indexSCBC, &b_indexSCBC);
   fChain->SetBranchAddress("nTrack", &nTrack, &b_nTrack);
   fChain->SetBranchAddress("pxTrack", pxTrack, &b_pxTrack);
   fChain->SetBranchAddress("pyTrack", pyTrack, &b_pyTrack);
   fChain->SetBranchAddress("pzTrack", pzTrack, &b_pzTrack);
   fChain->SetBranchAddress("vtxIndexTrack", vtxIndexTrack, &b_vtxIndexTrack);
   fChain->SetBranchAddress("vtxWeightTrack", vtxWeightTrack, &b_vtxWeightTrack);
   fChain->SetBranchAddress("chargeTrack", chargeTrack, &b_chargeTrack);
   fChain->SetBranchAddress("ptErrorTrack", ptErrorTrack, &b_ptErrorTrack);
   fChain->SetBranchAddress("trackValidHitsTrack", trackValidHitsTrack, &b_trackValidHitsTrack);
   fChain->SetBranchAddress("trackLostHitsTrack", trackLostHitsTrack, &b_trackLostHitsTrack);
   fChain->SetBranchAddress("trackNormalizedChi2Track", trackNormalizedChi2Track, &b_trackNormalizedChi2Track);
   fChain->SetBranchAddress("qualityMaskTrack", qualityMaskTrack, &b_qualityMaskTrack);
   fChain->SetBranchAddress("impactPar3DTrack", impactPar3DTrack, &b_impactPar3DTrack);
   fChain->SetBranchAddress("impactPar3DErrorTrack", impactPar3DErrorTrack, &b_impactPar3DErrorTrack);
   fChain->SetBranchAddress("transvImpactParTrack", transvImpactParTrack, &b_transvImpactParTrack);
   fChain->SetBranchAddress("transvImpactParErrorTrack", transvImpactParErrorTrack, &b_transvImpactParErrorTrack);
   fChain->SetBranchAddress("trackVxTrack", trackVxTrack, &b_trackVxTrack);
   fChain->SetBranchAddress("trackVyTrack", trackVyTrack, &b_trackVyTrack);
   fChain->SetBranchAddress("trackVzTrack", trackVzTrack, &b_trackVzTrack);
   fChain->SetBranchAddress("pxAtOuterTrack", pxAtOuterTrack, &b_pxAtOuterTrack);
   fChain->SetBranchAddress("pyAtOuterTrack", pyAtOuterTrack, &b_pyAtOuterTrack);
   fChain->SetBranchAddress("pzAtOuterTrack", pzAtOuterTrack, &b_pzAtOuterTrack);
   fChain->SetBranchAddress("xAtOuterTrack", xAtOuterTrack, &b_xAtOuterTrack);
   fChain->SetBranchAddress("yAtOuterTrack", yAtOuterTrack, &b_yAtOuterTrack);
   fChain->SetBranchAddress("zAtOuterTrack", zAtOuterTrack, &b_zAtOuterTrack);
   fChain->SetBranchAddress("pxAtInnerTrack", pxAtInnerTrack, &b_pxAtInnerTrack);
   fChain->SetBranchAddress("pyAtInnerTrack", pyAtInnerTrack, &b_pyAtInnerTrack);
   fChain->SetBranchAddress("pzAtInnerTrack", pzAtInnerTrack, &b_pzAtInnerTrack);
   fChain->SetBranchAddress("xAtInnerTrack", xAtInnerTrack, &b_xAtInnerTrack);
   fChain->SetBranchAddress("yAtInnerTrack", yAtInnerTrack, &b_yAtInnerTrack);
   fChain->SetBranchAddress("zAtInnerTrack", zAtInnerTrack, &b_zAtInnerTrack);
   fChain->SetBranchAddress("recHitsSizeTrack", recHitsSizeTrack, &b_recHitsSizeTrack);
   fChain->SetBranchAddress("pixelHitsTrack", pixelHitsTrack, &b_pixelHitsTrack);
   fChain->SetBranchAddress("expInnerLayersTrack", expInnerLayersTrack, &b_expInnerLayersTrack);
   fChain->SetBranchAddress("numberOfValidPixelBarrelHitsTrack", numberOfValidPixelBarrelHitsTrack, &b_numberOfValidPixelBarrelHitsTrack);
   fChain->SetBranchAddress("numberOfValidPixelEndcapHitsTrack", numberOfValidPixelEndcapHitsTrack, &b_numberOfValidPixelEndcapHitsTrack);
   fChain->SetBranchAddress("numberOfValidStripTIBHitsTrack", numberOfValidStripTIBHitsTrack, &b_numberOfValidStripTIBHitsTrack);
   fChain->SetBranchAddress("numberOfValidStripTIDHitsTrack", numberOfValidStripTIDHitsTrack, &b_numberOfValidStripTIDHitsTrack);
   fChain->SetBranchAddress("numberOfValidStripTOBHitsTrack", numberOfValidStripTOBHitsTrack, &b_numberOfValidStripTOBHitsTrack);
   fChain->SetBranchAddress("numberOfValidStripTECHitsTrack", numberOfValidStripTECHitsTrack, &b_numberOfValidStripTECHitsTrack);
   fChain->SetBranchAddress("truncatedDeDxTrack", truncatedDeDxTrack, &b_truncatedDeDxTrack);
   fChain->SetBranchAddress("truncatedDeDxErrorTrack", truncatedDeDxErrorTrack, &b_truncatedDeDxErrorTrack);
   fChain->SetBranchAddress("truncatedDeDxNoMTrack", truncatedDeDxNoMTrack, &b_truncatedDeDxNoMTrack);
   fChain->SetBranchAddress("medianDeDxTrack", medianDeDxTrack, &b_medianDeDxTrack);
   fChain->SetBranchAddress("medianDeDxErrorTrack", medianDeDxErrorTrack, &b_medianDeDxErrorTrack);
   fChain->SetBranchAddress("medianDeDxNoMTrack", medianDeDxNoMTrack, &b_medianDeDxNoMTrack);
   fChain->SetBranchAddress("harmonic2DeDxTrack", harmonic2DeDxTrack, &b_harmonic2DeDxTrack);
   fChain->SetBranchAddress("harmonic2DeDxErrorTrack", harmonic2DeDxErrorTrack, &b_harmonic2DeDxErrorTrack);
   fChain->SetBranchAddress("harmonic2DeDxNoMTrack", harmonic2DeDxNoMTrack, &b_harmonic2DeDxNoMTrack);
   fChain->SetBranchAddress("nGsfTrack", &nGsfTrack, &b_nGsfTrack);
   fChain->SetBranchAddress("pxGsfTrack", pxGsfTrack, &b_pxGsfTrack);
   fChain->SetBranchAddress("pyGsfTrack", pyGsfTrack, &b_pyGsfTrack);
   fChain->SetBranchAddress("pzGsfTrack", pzGsfTrack, &b_pzGsfTrack);
   fChain->SetBranchAddress("vtxIndexGsfTrack", vtxIndexGsfTrack, &b_vtxIndexGsfTrack);
   fChain->SetBranchAddress("vtxWeightGsfTrack", vtxWeightGsfTrack, &b_vtxWeightGsfTrack);
   fChain->SetBranchAddress("chargeGsfTrack", chargeGsfTrack, &b_chargeGsfTrack);
   fChain->SetBranchAddress("ptErrorGsfTrack", ptErrorGsfTrack, &b_ptErrorGsfTrack);
   fChain->SetBranchAddress("trackValidHitsGsfTrack", trackValidHitsGsfTrack, &b_trackValidHitsGsfTrack);
   fChain->SetBranchAddress("trackLostHitsGsfTrack", trackLostHitsGsfTrack, &b_trackLostHitsGsfTrack);
   fChain->SetBranchAddress("trackNormalizedChi2GsfTrack", trackNormalizedChi2GsfTrack, &b_trackNormalizedChi2GsfTrack);
   fChain->SetBranchAddress("qualityMaskGsfTrack", qualityMaskGsfTrack, &b_qualityMaskGsfTrack);
   fChain->SetBranchAddress("impactPar3DGsfTrack", impactPar3DGsfTrack, &b_impactPar3DGsfTrack);
   fChain->SetBranchAddress("impactPar3DErrorGsfTrack", impactPar3DErrorGsfTrack, &b_impactPar3DErrorGsfTrack);
   fChain->SetBranchAddress("transvImpactParGsfTrack", transvImpactParGsfTrack, &b_transvImpactParGsfTrack);
   fChain->SetBranchAddress("transvImpactParErrorGsfTrack", transvImpactParErrorGsfTrack, &b_transvImpactParErrorGsfTrack);
   fChain->SetBranchAddress("trackVxGsfTrack", trackVxGsfTrack, &b_trackVxGsfTrack);
   fChain->SetBranchAddress("trackVyGsfTrack", trackVyGsfTrack, &b_trackVyGsfTrack);
   fChain->SetBranchAddress("trackVzGsfTrack", trackVzGsfTrack, &b_trackVzGsfTrack);
   fChain->SetBranchAddress("pxAtOuterGsfTrack", pxAtOuterGsfTrack, &b_pxAtOuterGsfTrack);
   fChain->SetBranchAddress("pyAtOuterGsfTrack", pyAtOuterGsfTrack, &b_pyAtOuterGsfTrack);
   fChain->SetBranchAddress("pzAtOuterGsfTrack", pzAtOuterGsfTrack, &b_pzAtOuterGsfTrack);
   fChain->SetBranchAddress("xAtOuterGsfTrack", xAtOuterGsfTrack, &b_xAtOuterGsfTrack);
   fChain->SetBranchAddress("yAtOuterGsfTrack", yAtOuterGsfTrack, &b_yAtOuterGsfTrack);
   fChain->SetBranchAddress("zAtOuterGsfTrack", zAtOuterGsfTrack, &b_zAtOuterGsfTrack);
   fChain->SetBranchAddress("pxAtInnerGsfTrack", pxAtInnerGsfTrack, &b_pxAtInnerGsfTrack);
   fChain->SetBranchAddress("pyAtInnerGsfTrack", pyAtInnerGsfTrack, &b_pyAtInnerGsfTrack);
   fChain->SetBranchAddress("pzAtInnerGsfTrack", pzAtInnerGsfTrack, &b_pzAtInnerGsfTrack);
   fChain->SetBranchAddress("xAtInnerGsfTrack", xAtInnerGsfTrack, &b_xAtInnerGsfTrack);
   fChain->SetBranchAddress("yAtInnerGsfTrack", yAtInnerGsfTrack, &b_yAtInnerGsfTrack);
   fChain->SetBranchAddress("zAtInnerGsfTrack", zAtInnerGsfTrack, &b_zAtInnerGsfTrack);
   fChain->SetBranchAddress("recHitsSizeGsfTrack", recHitsSizeGsfTrack, &b_recHitsSizeGsfTrack);
   fChain->SetBranchAddress("pixelHitsGsfTrack", pixelHitsGsfTrack, &b_pixelHitsGsfTrack);
   fChain->SetBranchAddress("expInnerLayersGsfTrack", expInnerLayersGsfTrack, &b_expInnerLayersGsfTrack);
   fChain->SetBranchAddress("numberOfValidPixelBarrelHitsGsfTrack", numberOfValidPixelBarrelHitsGsfTrack, &b_numberOfValidPixelBarrelHitsGsfTrack);
   fChain->SetBranchAddress("numberOfValidPixelEndcapHitsGsfTrack", numberOfValidPixelEndcapHitsGsfTrack, &b_numberOfValidPixelEndcapHitsGsfTrack);
   fChain->SetBranchAddress("numberOfValidStripTIBHitsGsfTrack", numberOfValidStripTIBHitsGsfTrack, &b_numberOfValidStripTIBHitsGsfTrack);
   fChain->SetBranchAddress("numberOfValidStripTIDHitsGsfTrack", numberOfValidStripTIDHitsGsfTrack, &b_numberOfValidStripTIDHitsGsfTrack);
   fChain->SetBranchAddress("numberOfValidStripTOBHitsGsfTrack", numberOfValidStripTOBHitsGsfTrack, &b_numberOfValidStripTOBHitsGsfTrack);
   fChain->SetBranchAddress("numberOfValidStripTECHitsGsfTrack", numberOfValidStripTECHitsGsfTrack, &b_numberOfValidStripTECHitsGsfTrack);
   fChain->SetBranchAddress("chargeModeGsfTrack", chargeModeGsfTrack, &b_chargeModeGsfTrack);
   fChain->SetBranchAddress("pxModeGsfTrack", pxModeGsfTrack, &b_pxModeGsfTrack);
   fChain->SetBranchAddress("pyModeGsfTrack", pyModeGsfTrack, &b_pyModeGsfTrack);
   fChain->SetBranchAddress("pzModeGsfTrack", pzModeGsfTrack, &b_pzModeGsfTrack);
   fChain->SetBranchAddress("recoFlagsGsfTrack", recoFlagsGsfTrack, &b_recoFlagsGsfTrack);
   fChain->SetBranchAddress("nGlobalMuonTrack", &nGlobalMuonTrack, &b_nGlobalMuonTrack);
   fChain->SetBranchAddress("pxGlobalMuonTrack", pxGlobalMuonTrack, &b_pxGlobalMuonTrack);
   fChain->SetBranchAddress("pyGlobalMuonTrack", pyGlobalMuonTrack, &b_pyGlobalMuonTrack);
   fChain->SetBranchAddress("pzGlobalMuonTrack", pzGlobalMuonTrack, &b_pzGlobalMuonTrack);
   fChain->SetBranchAddress("vtxIndexGlobalMuonTrack", vtxIndexGlobalMuonTrack, &b_vtxIndexGlobalMuonTrack);
   fChain->SetBranchAddress("vtxWeightGlobalMuonTrack", vtxWeightGlobalMuonTrack, &b_vtxWeightGlobalMuonTrack);
   fChain->SetBranchAddress("chargeGlobalMuonTrack", chargeGlobalMuonTrack, &b_chargeGlobalMuonTrack);
   fChain->SetBranchAddress("ptErrorGlobalMuonTrack", ptErrorGlobalMuonTrack, &b_ptErrorGlobalMuonTrack);
   fChain->SetBranchAddress("trackValidHitsGlobalMuonTrack", trackValidHitsGlobalMuonTrack, &b_trackValidHitsGlobalMuonTrack);
   fChain->SetBranchAddress("trackLostHitsGlobalMuonTrack", trackLostHitsGlobalMuonTrack, &b_trackLostHitsGlobalMuonTrack);
   fChain->SetBranchAddress("trackNormalizedChi2GlobalMuonTrack", trackNormalizedChi2GlobalMuonTrack, &b_trackNormalizedChi2GlobalMuonTrack);
   fChain->SetBranchAddress("qualityMaskGlobalMuonTrack", qualityMaskGlobalMuonTrack, &b_qualityMaskGlobalMuonTrack);
   fChain->SetBranchAddress("impactPar3DGlobalMuonTrack", impactPar3DGlobalMuonTrack, &b_impactPar3DGlobalMuonTrack);
   fChain->SetBranchAddress("impactPar3DErrorGlobalMuonTrack", impactPar3DErrorGlobalMuonTrack, &b_impactPar3DErrorGlobalMuonTrack);
   fChain->SetBranchAddress("transvImpactParGlobalMuonTrack", transvImpactParGlobalMuonTrack, &b_transvImpactParGlobalMuonTrack);
   fChain->SetBranchAddress("transvImpactParErrorGlobalMuonTrack", transvImpactParErrorGlobalMuonTrack, &b_transvImpactParErrorGlobalMuonTrack);
   fChain->SetBranchAddress("trackVxGlobalMuonTrack", trackVxGlobalMuonTrack, &b_trackVxGlobalMuonTrack);
   fChain->SetBranchAddress("trackVyGlobalMuonTrack", trackVyGlobalMuonTrack, &b_trackVyGlobalMuonTrack);
   fChain->SetBranchAddress("trackVzGlobalMuonTrack", trackVzGlobalMuonTrack, &b_trackVzGlobalMuonTrack);
   fChain->SetBranchAddress("pxAtOuterGlobalMuonTrack", pxAtOuterGlobalMuonTrack, &b_pxAtOuterGlobalMuonTrack);
   fChain->SetBranchAddress("pyAtOuterGlobalMuonTrack", pyAtOuterGlobalMuonTrack, &b_pyAtOuterGlobalMuonTrack);
   fChain->SetBranchAddress("pzAtOuterGlobalMuonTrack", pzAtOuterGlobalMuonTrack, &b_pzAtOuterGlobalMuonTrack);
   fChain->SetBranchAddress("xAtOuterGlobalMuonTrack", xAtOuterGlobalMuonTrack, &b_xAtOuterGlobalMuonTrack);
   fChain->SetBranchAddress("yAtOuterGlobalMuonTrack", yAtOuterGlobalMuonTrack, &b_yAtOuterGlobalMuonTrack);
   fChain->SetBranchAddress("zAtOuterGlobalMuonTrack", zAtOuterGlobalMuonTrack, &b_zAtOuterGlobalMuonTrack);
   fChain->SetBranchAddress("pxAtInnerGlobalMuonTrack", pxAtInnerGlobalMuonTrack, &b_pxAtInnerGlobalMuonTrack);
   fChain->SetBranchAddress("pyAtInnerGlobalMuonTrack", pyAtInnerGlobalMuonTrack, &b_pyAtInnerGlobalMuonTrack);
   fChain->SetBranchAddress("pzAtInnerGlobalMuonTrack", pzAtInnerGlobalMuonTrack, &b_pzAtInnerGlobalMuonTrack);
   fChain->SetBranchAddress("xAtInnerGlobalMuonTrack", xAtInnerGlobalMuonTrack, &b_xAtInnerGlobalMuonTrack);
   fChain->SetBranchAddress("yAtInnerGlobalMuonTrack", yAtInnerGlobalMuonTrack, &b_yAtInnerGlobalMuonTrack);
   fChain->SetBranchAddress("zAtInnerGlobalMuonTrack", zAtInnerGlobalMuonTrack, &b_zAtInnerGlobalMuonTrack);
   fChain->SetBranchAddress("recHitsSizeGlobalMuonTrack", recHitsSizeGlobalMuonTrack, &b_recHitsSizeGlobalMuonTrack);
   fChain->SetBranchAddress("pixelHitsGlobalMuonTrack", pixelHitsGlobalMuonTrack, &b_pixelHitsGlobalMuonTrack);
   fChain->SetBranchAddress("expInnerLayersGlobalMuonTrack", expInnerLayersGlobalMuonTrack, &b_expInnerLayersGlobalMuonTrack);
   fChain->SetBranchAddress("numberOfValidPixelBarrelHitsGlobalMuonTrack", numberOfValidPixelBarrelHitsGlobalMuonTrack, &b_numberOfValidPixelBarrelHitsGlobalMuonTrack);
   fChain->SetBranchAddress("numberOfValidPixelEndcapHitsGlobalMuonTrack", numberOfValidPixelEndcapHitsGlobalMuonTrack, &b_numberOfValidPixelEndcapHitsGlobalMuonTrack);
   fChain->SetBranchAddress("numberOfValidStripTIBHitsGlobalMuonTrack", numberOfValidStripTIBHitsGlobalMuonTrack, &b_numberOfValidStripTIBHitsGlobalMuonTrack);
   fChain->SetBranchAddress("numberOfValidStripTIDHitsGlobalMuonTrack", numberOfValidStripTIDHitsGlobalMuonTrack, &b_numberOfValidStripTIDHitsGlobalMuonTrack);
   fChain->SetBranchAddress("numberOfValidStripTOBHitsGlobalMuonTrack", numberOfValidStripTOBHitsGlobalMuonTrack, &b_numberOfValidStripTOBHitsGlobalMuonTrack);
   fChain->SetBranchAddress("numberOfValidStripTECHitsGlobalMuonTrack", numberOfValidStripTECHitsGlobalMuonTrack, &b_numberOfValidStripTECHitsGlobalMuonTrack);
   fChain->SetBranchAddress("nSTAMuonTrack", &nSTAMuonTrack, &b_nSTAMuonTrack);
   fChain->SetBranchAddress("pxSTAMuonTrack", pxSTAMuonTrack, &b_pxSTAMuonTrack);
   fChain->SetBranchAddress("pySTAMuonTrack", pySTAMuonTrack, &b_pySTAMuonTrack);
   fChain->SetBranchAddress("pzSTAMuonTrack", pzSTAMuonTrack, &b_pzSTAMuonTrack);
   fChain->SetBranchAddress("vtxIndexSTAMuonTrack", vtxIndexSTAMuonTrack, &b_vtxIndexSTAMuonTrack);
   fChain->SetBranchAddress("vtxWeightSTAMuonTrack", vtxWeightSTAMuonTrack, &b_vtxWeightSTAMuonTrack);
   fChain->SetBranchAddress("chargeSTAMuonTrack", chargeSTAMuonTrack, &b_chargeSTAMuonTrack);
   fChain->SetBranchAddress("ptErrorSTAMuonTrack", ptErrorSTAMuonTrack, &b_ptErrorSTAMuonTrack);
   fChain->SetBranchAddress("trackValidHitsSTAMuonTrack", trackValidHitsSTAMuonTrack, &b_trackValidHitsSTAMuonTrack);
   fChain->SetBranchAddress("trackLostHitsSTAMuonTrack", trackLostHitsSTAMuonTrack, &b_trackLostHitsSTAMuonTrack);
   fChain->SetBranchAddress("trackNormalizedChi2STAMuonTrack", trackNormalizedChi2STAMuonTrack, &b_trackNormalizedChi2STAMuonTrack);
   fChain->SetBranchAddress("qualityMaskSTAMuonTrack", qualityMaskSTAMuonTrack, &b_qualityMaskSTAMuonTrack);
   fChain->SetBranchAddress("impactPar3DSTAMuonTrack", impactPar3DSTAMuonTrack, &b_impactPar3DSTAMuonTrack);
   fChain->SetBranchAddress("impactPar3DErrorSTAMuonTrack", impactPar3DErrorSTAMuonTrack, &b_impactPar3DErrorSTAMuonTrack);
   fChain->SetBranchAddress("transvImpactParSTAMuonTrack", transvImpactParSTAMuonTrack, &b_transvImpactParSTAMuonTrack);
   fChain->SetBranchAddress("transvImpactParErrorSTAMuonTrack", transvImpactParErrorSTAMuonTrack, &b_transvImpactParErrorSTAMuonTrack);
   fChain->SetBranchAddress("trackVxSTAMuonTrack", trackVxSTAMuonTrack, &b_trackVxSTAMuonTrack);
   fChain->SetBranchAddress("trackVySTAMuonTrack", trackVySTAMuonTrack, &b_trackVySTAMuonTrack);
   fChain->SetBranchAddress("trackVzSTAMuonTrack", trackVzSTAMuonTrack, &b_trackVzSTAMuonTrack);
   fChain->SetBranchAddress("pxAtOuterSTAMuonTrack", pxAtOuterSTAMuonTrack, &b_pxAtOuterSTAMuonTrack);
   fChain->SetBranchAddress("pyAtOuterSTAMuonTrack", pyAtOuterSTAMuonTrack, &b_pyAtOuterSTAMuonTrack);
   fChain->SetBranchAddress("pzAtOuterSTAMuonTrack", pzAtOuterSTAMuonTrack, &b_pzAtOuterSTAMuonTrack);
   fChain->SetBranchAddress("xAtOuterSTAMuonTrack", xAtOuterSTAMuonTrack, &b_xAtOuterSTAMuonTrack);
   fChain->SetBranchAddress("yAtOuterSTAMuonTrack", yAtOuterSTAMuonTrack, &b_yAtOuterSTAMuonTrack);
   fChain->SetBranchAddress("zAtOuterSTAMuonTrack", zAtOuterSTAMuonTrack, &b_zAtOuterSTAMuonTrack);
   fChain->SetBranchAddress("pxAtInnerSTAMuonTrack", pxAtInnerSTAMuonTrack, &b_pxAtInnerSTAMuonTrack);
   fChain->SetBranchAddress("pyAtInnerSTAMuonTrack", pyAtInnerSTAMuonTrack, &b_pyAtInnerSTAMuonTrack);
   fChain->SetBranchAddress("pzAtInnerSTAMuonTrack", pzAtInnerSTAMuonTrack, &b_pzAtInnerSTAMuonTrack);
   fChain->SetBranchAddress("xAtInnerSTAMuonTrack", xAtInnerSTAMuonTrack, &b_xAtInnerSTAMuonTrack);
   fChain->SetBranchAddress("yAtInnerSTAMuonTrack", yAtInnerSTAMuonTrack, &b_yAtInnerSTAMuonTrack);
   fChain->SetBranchAddress("zAtInnerSTAMuonTrack", zAtInnerSTAMuonTrack, &b_zAtInnerSTAMuonTrack);
   fChain->SetBranchAddress("recHitsSizeSTAMuonTrack", recHitsSizeSTAMuonTrack, &b_recHitsSizeSTAMuonTrack);
   fChain->SetBranchAddress("pixelHitsSTAMuonTrack", pixelHitsSTAMuonTrack, &b_pixelHitsSTAMuonTrack);
   fChain->SetBranchAddress("expInnerLayersSTAMuonTrack", expInnerLayersSTAMuonTrack, &b_expInnerLayersSTAMuonTrack);
   fChain->SetBranchAddress("numberOfValidPixelBarrelHitsSTAMuonTrack", numberOfValidPixelBarrelHitsSTAMuonTrack, &b_numberOfValidPixelBarrelHitsSTAMuonTrack);
   fChain->SetBranchAddress("numberOfValidPixelEndcapHitsSTAMuonTrack", numberOfValidPixelEndcapHitsSTAMuonTrack, &b_numberOfValidPixelEndcapHitsSTAMuonTrack);
   fChain->SetBranchAddress("numberOfValidStripTIBHitsSTAMuonTrack", numberOfValidStripTIBHitsSTAMuonTrack, &b_numberOfValidStripTIBHitsSTAMuonTrack);
   fChain->SetBranchAddress("numberOfValidStripTIDHitsSTAMuonTrack", numberOfValidStripTIDHitsSTAMuonTrack, &b_numberOfValidStripTIDHitsSTAMuonTrack);
   fChain->SetBranchAddress("numberOfValidStripTOBHitsSTAMuonTrack", numberOfValidStripTOBHitsSTAMuonTrack, &b_numberOfValidStripTOBHitsSTAMuonTrack);
   fChain->SetBranchAddress("numberOfValidStripTECHitsSTAMuonTrack", numberOfValidStripTECHitsSTAMuonTrack, &b_numberOfValidStripTECHitsSTAMuonTrack);
   fChain->SetBranchAddress("nPV", &nPV, &b_nPV);
   fChain->SetBranchAddress("PVxPV", PVxPV, &b_PVxPV);
   fChain->SetBranchAddress("PVyPV", PVyPV, &b_PVyPV);
   fChain->SetBranchAddress("PVzPV", PVzPV, &b_PVzPV);
   fChain->SetBranchAddress("PVErrxPV", PVErrxPV, &b_PVErrxPV);
   fChain->SetBranchAddress("PVErryPV", PVErryPV, &b_PVErryPV);
   fChain->SetBranchAddress("PVErrzPV", PVErrzPV, &b_PVErrzPV);
   fChain->SetBranchAddress("SumPtPV", SumPtPV, &b_SumPtPV);
   fChain->SetBranchAddress("ndofPV", ndofPV, &b_ndofPV);
   fChain->SetBranchAddress("chi2PV", chi2PV, &b_chi2PV);
   fChain->SetBranchAddress("nMuon", &nMuon, &b_nMuon);
   fChain->SetBranchAddress("chargeMuon", chargeMuon, &b_chargeMuon);
   fChain->SetBranchAddress("energyMuon", energyMuon, &b_energyMuon);
   fChain->SetBranchAddress("thetaMuon", thetaMuon, &b_thetaMuon);
   fChain->SetBranchAddress("etaMuon", etaMuon, &b_etaMuon);
   fChain->SetBranchAddress("phiMuon", phiMuon, &b_phiMuon);
   fChain->SetBranchAddress("pxMuon", pxMuon, &b_pxMuon);
   fChain->SetBranchAddress("pyMuon", pyMuon, &b_pyMuon);
   fChain->SetBranchAddress("pzMuon", pzMuon, &b_pzMuon);
   fChain->SetBranchAddress("vertexXMuon", vertexXMuon, &b_vertexXMuon);
   fChain->SetBranchAddress("vertexYMuon", vertexYMuon, &b_vertexYMuon);
   fChain->SetBranchAddress("vertexZMuon", vertexZMuon, &b_vertexZMuon);
   fChain->SetBranchAddress("trackIndexMuon", trackIndexMuon, &b_trackIndexMuon);
   fChain->SetBranchAddress("standAloneTrackIndexMuon", standAloneTrackIndexMuon, &b_standAloneTrackIndexMuon);
   fChain->SetBranchAddress("combinedTrackIndexMuon", combinedTrackIndexMuon, &b_combinedTrackIndexMuon);
   fChain->SetBranchAddress("muonIdMuon", muonIdMuon, &b_muonIdMuon);
   fChain->SetBranchAddress("sumPt03Muon", sumPt03Muon, &b_sumPt03Muon);
   fChain->SetBranchAddress("emEt03Muon", emEt03Muon, &b_emEt03Muon);
   fChain->SetBranchAddress("hadEt03Muon", hadEt03Muon, &b_hadEt03Muon);
   fChain->SetBranchAddress("hoEt03Muon", hoEt03Muon, &b_hoEt03Muon);
   fChain->SetBranchAddress("nTrk03Muon", nTrk03Muon, &b_nTrk03Muon);
   fChain->SetBranchAddress("nJets03Muon", nJets03Muon, &b_nJets03Muon);
   fChain->SetBranchAddress("sumPt05Muon", sumPt05Muon, &b_sumPt05Muon);
   fChain->SetBranchAddress("emEt05Muon", emEt05Muon, &b_emEt05Muon);
   fChain->SetBranchAddress("hadEt05Muon", hadEt05Muon, &b_hadEt05Muon);
   fChain->SetBranchAddress("hoEt05Muon", hoEt05Muon, &b_hoEt05Muon);
   fChain->SetBranchAddress("nTrk05Muon", nTrk05Muon, &b_nTrk05Muon);
   fChain->SetBranchAddress("nJets05Muon", nJets05Muon, &b_nJets05Muon);
   fChain->SetBranchAddress("EcalExpDepoMuon", EcalExpDepoMuon, &b_EcalExpDepoMuon);
   fChain->SetBranchAddress("HcalExpDepoMuon", HcalExpDepoMuon, &b_HcalExpDepoMuon);
   fChain->SetBranchAddress("HoExpDepoMuon", HoExpDepoMuon, &b_HoExpDepoMuon);
   fChain->SetBranchAddress("emS9Muon", emS9Muon, &b_emS9Muon);
   fChain->SetBranchAddress("hadS9Muon", hadS9Muon, &b_hadS9Muon);
   fChain->SetBranchAddress("hoS9Muon", hoS9Muon, &b_hoS9Muon);
   fChain->SetBranchAddress("CaloCompMuon", CaloCompMuon, &b_CaloCompMuon);
   fChain->SetBranchAddress("nMet", &nMet, &b_nMet);
   fChain->SetBranchAddress("chargeMet", chargeMet, &b_chargeMet);
   fChain->SetBranchAddress("energyMet", energyMet, &b_energyMet);
   fChain->SetBranchAddress("thetaMet", thetaMet, &b_thetaMet);
   fChain->SetBranchAddress("etaMet", etaMet, &b_etaMet);
   fChain->SetBranchAddress("phiMet", phiMet, &b_phiMet);
   fChain->SetBranchAddress("pxMet", pxMet, &b_pxMet);
   fChain->SetBranchAddress("pyMet", pyMet, &b_pyMet);
   fChain->SetBranchAddress("pzMet", pzMet, &b_pzMet);
   fChain->SetBranchAddress("vertexXMet", vertexXMet, &b_vertexXMet);
   fChain->SetBranchAddress("vertexYMet", vertexYMet, &b_vertexYMet);
   fChain->SetBranchAddress("vertexZMet", vertexZMet, &b_vertexZMet);
   fChain->SetBranchAddress("nTCMet", &nTCMet, &b_nTCMet);
   fChain->SetBranchAddress("chargeTCMet", chargeTCMet, &b_chargeTCMet);
   fChain->SetBranchAddress("energyTCMet", energyTCMet, &b_energyTCMet);
   fChain->SetBranchAddress("thetaTCMet", thetaTCMet, &b_thetaTCMet);
   fChain->SetBranchAddress("etaTCMet", etaTCMet, &b_etaTCMet);
   fChain->SetBranchAddress("phiTCMet", phiTCMet, &b_phiTCMet);
   fChain->SetBranchAddress("pxTCMet", pxTCMet, &b_pxTCMet);
   fChain->SetBranchAddress("pyTCMet", pyTCMet, &b_pyTCMet);
   fChain->SetBranchAddress("pzTCMet", pzTCMet, &b_pzTCMet);
   fChain->SetBranchAddress("vertexXTCMet", vertexXTCMet, &b_vertexXTCMet);
   fChain->SetBranchAddress("vertexYTCMet", vertexYTCMet, &b_vertexYTCMet);
   fChain->SetBranchAddress("vertexZTCMet", vertexZTCMet, &b_vertexZTCMet);
   fChain->SetBranchAddress("nPFMet", &nPFMet, &b_nPFMet);
   fChain->SetBranchAddress("chargePFMet", chargePFMet, &b_chargePFMet);
   fChain->SetBranchAddress("energyPFMet", energyPFMet, &b_energyPFMet);
   fChain->SetBranchAddress("thetaPFMet", thetaPFMet, &b_thetaPFMet);
   fChain->SetBranchAddress("etaPFMet", etaPFMet, &b_etaPFMet);
   fChain->SetBranchAddress("phiPFMet", phiPFMet, &b_phiPFMet);
   fChain->SetBranchAddress("pxPFMet", pxPFMet, &b_pxPFMet);
   fChain->SetBranchAddress("pyPFMet", pyPFMet, &b_pyPFMet);
   fChain->SetBranchAddress("pzPFMet", pzPFMet, &b_pzPFMet);
   fChain->SetBranchAddress("vertexXPFMet", vertexXPFMet, &b_vertexXPFMet);
   fChain->SetBranchAddress("vertexYPFMet", vertexYPFMet, &b_vertexYPFMet);
   fChain->SetBranchAddress("vertexZPFMet", vertexZPFMet, &b_vertexZPFMet);
   fChain->SetBranchAddress("nGenMet", &nGenMet, &b_nGenMet);
   fChain->SetBranchAddress("chargeGenMet", chargeGenMet, &b_chargeGenMet);
   fChain->SetBranchAddress("energyGenMet", energyGenMet, &b_energyGenMet);
   fChain->SetBranchAddress("thetaGenMet", thetaGenMet, &b_thetaGenMet);
   fChain->SetBranchAddress("etaGenMet", etaGenMet, &b_etaGenMet);
   fChain->SetBranchAddress("phiGenMet", phiGenMet, &b_phiGenMet);
   fChain->SetBranchAddress("pxGenMet", pxGenMet, &b_pxGenMet);
   fChain->SetBranchAddress("pyGenMet", pyGenMet, &b_pyGenMet);
   fChain->SetBranchAddress("pzGenMet", pzGenMet, &b_pzGenMet);
   fChain->SetBranchAddress("vertexXGenMet", vertexXGenMet, &b_vertexXGenMet);
   fChain->SetBranchAddress("vertexYGenMet", vertexYGenMet, &b_vertexYGenMet);
   fChain->SetBranchAddress("vertexZGenMet", vertexZGenMet, &b_vertexZGenMet);
   fChain->SetBranchAddress("nAK5Jet", &nAK5Jet, &b_nAK5Jet);
   fChain->SetBranchAddress("chargeAK5Jet", chargeAK5Jet, &b_chargeAK5Jet);
   fChain->SetBranchAddress("energyAK5Jet", energyAK5Jet, &b_energyAK5Jet);
   fChain->SetBranchAddress("thetaAK5Jet", thetaAK5Jet, &b_thetaAK5Jet);
   fChain->SetBranchAddress("etaAK5Jet", etaAK5Jet, &b_etaAK5Jet);
   fChain->SetBranchAddress("phiAK5Jet", phiAK5Jet, &b_phiAK5Jet);
   fChain->SetBranchAddress("pxAK5Jet", pxAK5Jet, &b_pxAK5Jet);
   fChain->SetBranchAddress("pyAK5Jet", pyAK5Jet, &b_pyAK5Jet);
   fChain->SetBranchAddress("pzAK5Jet", pzAK5Jet, &b_pzAK5Jet);
   fChain->SetBranchAddress("vertexXAK5Jet", vertexXAK5Jet, &b_vertexXAK5Jet);
   fChain->SetBranchAddress("vertexYAK5Jet", vertexYAK5Jet, &b_vertexYAK5Jet);
   fChain->SetBranchAddress("vertexZAK5Jet", vertexZAK5Jet, &b_vertexZAK5Jet);
   fChain->SetBranchAddress("alphaAK5Jet", alphaAK5Jet, &b_alphaAK5Jet);
   fChain->SetBranchAddress("emFracAK5Jet", emFracAK5Jet, &b_emFracAK5Jet);
   fChain->SetBranchAddress("hadFracAK5Jet", hadFracAK5Jet, &b_hadFracAK5Jet);
   fChain->SetBranchAddress("IdAK5Jet", IdAK5Jet, &b_IdAK5Jet);
   fChain->SetBranchAddress("nHitAK5Jet", nHitAK5Jet, &b_nHitAK5Jet);
   fChain->SetBranchAddress("nHit90AK5Jet", nHit90AK5Jet, &b_nHit90AK5Jet);
   fChain->SetBranchAddress("fHPDAK5Jet", fHPDAK5Jet, &b_fHPDAK5Jet);
   fChain->SetBranchAddress("covEtaEtaAK5Jet", covEtaEtaAK5Jet, &b_covEtaEtaAK5Jet);
   fChain->SetBranchAddress("covPhiPhiAK5Jet", covPhiPhiAK5Jet, &b_covPhiPhiAK5Jet);
   fChain->SetBranchAddress("fLSAK5Jet", fLSAK5Jet, &b_fLSAK5Jet);
   fChain->SetBranchAddress("fOOTAK5Jet", fOOTAK5Jet, &b_fOOTAK5Jet);
   fChain->SetBranchAddress("combinedSecondaryVertexBJetTagsAK5Jet", combinedSecondaryVertexBJetTagsAK5Jet, &b_combinedSecondaryVertexBJetTagsAK5Jet);
   fChain->SetBranchAddress("combinedSecondaryVertexMVABJetTagsAK5Jet", combinedSecondaryVertexMVABJetTagsAK5Jet, &b_combinedSecondaryVertexMVABJetTagsAK5Jet);
   fChain->SetBranchAddress("jetBProbabilityBJetTagsAK5Jet", jetBProbabilityBJetTagsAK5Jet, &b_jetBProbabilityBJetTagsAK5Jet);
   fChain->SetBranchAddress("jetProbabilityBJetTagsAK5Jet", jetProbabilityBJetTagsAK5Jet, &b_jetProbabilityBJetTagsAK5Jet);
   fChain->SetBranchAddress("simpleSecondaryVertexBJetTagsAK5Jet", simpleSecondaryVertexBJetTagsAK5Jet, &b_simpleSecondaryVertexBJetTagsAK5Jet);
   fChain->SetBranchAddress("softMuonBJetTagsAK5Jet", softMuonBJetTagsAK5Jet, &b_softMuonBJetTagsAK5Jet);
   fChain->SetBranchAddress("softMuonByIP3dBJetTagsAK5Jet", softMuonByIP3dBJetTagsAK5Jet, &b_softMuonByIP3dBJetTagsAK5Jet);
   fChain->SetBranchAddress("softMuonByPtBJetTagsAK5Jet", softMuonByPtBJetTagsAK5Jet, &b_softMuonByPtBJetTagsAK5Jet);
   fChain->SetBranchAddress("softElectronBJetTagsAK5Jet", softElectronBJetTagsAK5Jet, &b_softElectronBJetTagsAK5Jet);
   fChain->SetBranchAddress("softElectronByIP3dBJetTagsAK5Jet", softElectronByIP3dBJetTagsAK5Jet, &b_softElectronByIP3dBJetTagsAK5Jet);
   fChain->SetBranchAddress("softElectronByPtBJetTagsAK5Jet", softElectronByPtBJetTagsAK5Jet, &b_softElectronByPtBJetTagsAK5Jet);
   fChain->SetBranchAddress("trackCountingHighPurBJetTagsAK5Jet", trackCountingHighPurBJetTagsAK5Jet, &b_trackCountingHighPurBJetTagsAK5Jet);
   fChain->SetBranchAddress("trackCountingHighEffBJetTagsAK5Jet", trackCountingHighEffBJetTagsAK5Jet, &b_trackCountingHighEffBJetTagsAK5Jet);
   fChain->SetBranchAddress("combinedSecondaryVertexBJetTagsAK5Jet", combinedSecondaryVertexBJetTagsAK5Jet, &b_combinedSecondaryVertexBJetTagsAK5Jet);
   fChain->SetBranchAddress("combinedSecondaryVertexMVABJetTagsAK5Jet", combinedSecondaryVertexMVABJetTagsAK5Jet, &b_combinedSecondaryVertexMVABJetTagsAK5Jet);
   fChain->SetBranchAddress("jetBProbabilityBJetTagsAK5Jet", jetBProbabilityBJetTagsAK5Jet, &b_jetBProbabilityBJetTagsAK5Jet);
   fChain->SetBranchAddress("jetProbabilityBJetTagsAK5Jet", jetProbabilityBJetTagsAK5Jet, &b_jetProbabilityBJetTagsAK5Jet);
   fChain->SetBranchAddress("simpleSecondaryVertexBJetTagsAK5Jet", simpleSecondaryVertexBJetTagsAK5Jet, &b_simpleSecondaryVertexBJetTagsAK5Jet);
   fChain->SetBranchAddress("softMuonBJetTagsAK5Jet", softMuonBJetTagsAK5Jet, &b_softMuonBJetTagsAK5Jet);
   fChain->SetBranchAddress("trackCountingHighPurBJetTagsAK5Jet", trackCountingHighPurBJetTagsAK5Jet, &b_trackCountingHighPurBJetTagsAK5Jet);
   fChain->SetBranchAddress("trackCountingHighEffBJetTagsAK5Jet", trackCountingHighEffBJetTagsAK5Jet, &b_trackCountingHighEffBJetTagsAK5Jet);
   fChain->SetBranchAddress("uncorrEnergyAK5Jet", uncorrEnergyAK5Jet, &b_uncorrEnergyAK5Jet);
   fChain->SetBranchAddress("nAK5PFJet", &nAK5PFJet, &b_nAK5PFJet);
   fChain->SetBranchAddress("chargeAK5PFJet", chargeAK5PFJet, &b_chargeAK5PFJet);
   fChain->SetBranchAddress("energyAK5PFJet", energyAK5PFJet, &b_energyAK5PFJet);
   fChain->SetBranchAddress("thetaAK5PFJet", thetaAK5PFJet, &b_thetaAK5PFJet);
   fChain->SetBranchAddress("etaAK5PFJet", etaAK5PFJet, &b_etaAK5PFJet);
   fChain->SetBranchAddress("phiAK5PFJet", phiAK5PFJet, &b_phiAK5PFJet);
   fChain->SetBranchAddress("pxAK5PFJet", pxAK5PFJet, &b_pxAK5PFJet);
   fChain->SetBranchAddress("pyAK5PFJet", pyAK5PFJet, &b_pyAK5PFJet);
   fChain->SetBranchAddress("pzAK5PFJet", pzAK5PFJet, &b_pzAK5PFJet);
   fChain->SetBranchAddress("vertexXAK5PFJet", vertexXAK5PFJet, &b_vertexXAK5PFJet);
   fChain->SetBranchAddress("vertexYAK5PFJet", vertexYAK5PFJet, &b_vertexYAK5PFJet);
   fChain->SetBranchAddress("vertexZAK5PFJet", vertexZAK5PFJet, &b_vertexZAK5PFJet);
   fChain->SetBranchAddress("chargedHadronEnergyAK5PFJet", chargedHadronEnergyAK5PFJet, &b_chargedHadronEnergyAK5PFJet);
   fChain->SetBranchAddress("neutralHadronEnergyAK5PFJet", neutralHadronEnergyAK5PFJet, &b_neutralHadronEnergyAK5PFJet);
   fChain->SetBranchAddress("chargedEmEnergyAK5PFJet", chargedEmEnergyAK5PFJet, &b_chargedEmEnergyAK5PFJet);
   fChain->SetBranchAddress("neutralEmEnergyAK5PFJet", neutralEmEnergyAK5PFJet, &b_neutralEmEnergyAK5PFJet);
   fChain->SetBranchAddress("neutralMultiplicityAK5PFJet", neutralMultiplicityAK5PFJet, &b_neutralMultiplicityAK5PFJet);
   fChain->SetBranchAddress("chargedMultiplicityAK5PFJet", chargedMultiplicityAK5PFJet, &b_chargedMultiplicityAK5PFJet);
   fChain->SetBranchAddress("muonMultiplicityAK5PFJet", muonMultiplicityAK5PFJet, &b_muonMultiplicityAK5PFJet);
   fChain->SetBranchAddress("uncorrEnergyAK5PFJet", uncorrEnergyAK5PFJet, &b_uncorrEnergyAK5PFJet);
   fChain->SetBranchAddress("nAK5GenJet", &nAK5GenJet, &b_nAK5GenJet);
   fChain->SetBranchAddress("chargeAK5GenJet", chargeAK5GenJet, &b_chargeAK5GenJet);
   fChain->SetBranchAddress("energyAK5GenJet", energyAK5GenJet, &b_energyAK5GenJet);
   fChain->SetBranchAddress("thetaAK5GenJet", thetaAK5GenJet, &b_thetaAK5GenJet);
   fChain->SetBranchAddress("etaAK5GenJet", etaAK5GenJet, &b_etaAK5GenJet);
   fChain->SetBranchAddress("phiAK5GenJet", phiAK5GenJet, &b_phiAK5GenJet);
   fChain->SetBranchAddress("pxAK5GenJet", pxAK5GenJet, &b_pxAK5GenJet);
   fChain->SetBranchAddress("pyAK5GenJet", pyAK5GenJet, &b_pyAK5GenJet);
   fChain->SetBranchAddress("pzAK5GenJet", pzAK5GenJet, &b_pzAK5GenJet);
   fChain->SetBranchAddress("vertexXAK5GenJet", vertexXAK5GenJet, &b_vertexXAK5GenJet);
   fChain->SetBranchAddress("vertexYAK5GenJet", vertexYAK5GenJet, &b_vertexYAK5GenJet);
   fChain->SetBranchAddress("vertexZAK5GenJet", vertexZAK5GenJet, &b_vertexZAK5GenJet);
   fChain->SetBranchAddress("genPtHat", &genPtHat, &b_genPtHat);
   fChain->SetBranchAddress("genProcessId", &genProcessId, &b_genProcessId);
   fChain->SetBranchAddress("genWeight", &genWeight, &b_genWeight);
   fChain->SetBranchAddress("genAlphaQCD", &genAlphaQCD, &b_genAlphaQCD);
   fChain->SetBranchAddress("genAlphaQED", &genAlphaQED, &b_genAlphaQED);
   Notify();
}

Bool_t HiggsBase::Notify()
{
   // The Notify() function is called when a new file is opened. This
   // can be either for a new TTree in a TChain or when when a new TTree
   // is started when using PROOF. It is normally not necessary to make changes
   // to the generated code, but the routine can be extended by the
   // user if needed. The return value is currently not used.

   return kTRUE;
}

void HiggsBase::Show(Long64_t entry)
{
// Print contents of entry.
// If entry is not specified, print current entry
   if (!fChain) return;
   fChain->Show(entry);
}
Int_t HiggsBase::Cut(Long64_t entry)
{
// This function may be called from Loop.
// returns  1 if entry is accepted.
// returns -1 otherwise.
   return 1;
}
#endif // #ifdef HiggsBase_cxx
